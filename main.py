# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'programa.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import Materiais
from FCO import SecaoTransversal as SC, ElementosDaSecao
from SegundaOrdem import MetodoElementosFinitos
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.path as mpltPath
import math



class MyView(QtWidgets.QGraphicsView):
    def __init__(self, *args, **kwargs):
        super(MyView, self).__init__(*args, **kwargs)

    def resultados_longit_nd(self):
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        base = 0
        topo = ui.pontos_resultado[-1] * 100
        max = np.max(ui.resultados_nd)
        min = np.min(ui.resultados_nd)
        ui.labelVerif.setText('NdMáx = {0:.3f} kN - NdMín = {1:.3f} kN'.format(max, min))

        last_index = len(ui.resultados_nd) - 1
        for i in range(len(ui.resultados_nd)):
            if i == 0:
                line1 = plt.Line2D((0, round(ui.resultados_nd[i], 3)),
                                  (ui.pontos_resultado[i]*100, ui.pontos_resultado[i]*100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_nd[i+4], 3)),
                                   (ui.pontos_resultado[i+4] * 100, ui.pontos_resultado[i+4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_nd[i],3), round(ui.resultados_nd[i+4],3)),
                                   (ui.pontos_resultado[i]*100, ui.pontos_resultado[i+4]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_nd[i+4],3), round(ui.resultados_nd[i+8], 3)),
                                   (ui.pontos_resultado[i+4]*100, ui.pontos_resultado[i+8]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i == last_index:
                line1 = plt.Line2D((0, round(ui.resultados_nd[i], 3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_nd[i-4], 3)),
                                   (ui.pontos_resultado[i-4] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_nd[i - 4],3), round(ui.resultados_nd[i],3)),
                                   (ui.pontos_resultado[i - 4] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_nd[i - 8],3), round(ui.resultados_nd[i-4],3)),
                                   (ui.pontos_resultado[i - 8] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i not in [1, 2, 3, 4, 5, 6, 7,
                           last_index - 1, last_index -2, last_index -3,
                           last_index - 4, last_index -5, last_index -6, last_index-7]:
                line1 = plt.Line2D((0, round(ui.resultados_nd[i],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line2 = plt.Line2D((round(ui.resultados_nd[i],3), round(ui.resultados_nd[i+1],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i+1] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

        line = plt.Line2D((0, 0), (base, topo), linewidth=3, color='black')
        axes.add_line(line)
        axes.axis('auto')
        axes.set_title('Esforço normal')
        axes.grid(True)
        axes.set_xlabel('Nd (kN)', fontsize=10)
        axes.set_ylabel('L (cm)', fontsize=10)
        axes.plot()
        figure.subplots_adjust(left=0.2, bottom=0.15)
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)

    def resultados_longit_mx(self):
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        base = 0
        topo = ui.pontos_resultado[-1] * 100
        max = np.max(ui.resultados_mx)
        min = np.min(ui.resultados_mx)
        ui.labelVerif.setText('MxMáx = {0:.3f} kN.m - MxMín = {1:.3f} kN.m'.format(max, min))

        last_index = len(ui.resultados_mx) - 1
        for i in range(len(ui.resultados_mx)):
            if i == 0:
                line1 = plt.Line2D((0, round(ui.resultados_mx[i], 3)),
                                  (ui.pontos_resultado[i]*100, ui.pontos_resultado[i]*100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_mx[i+4], 3)),
                                   (ui.pontos_resultado[i+4] * 100, ui.pontos_resultado[i+4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_mx[i],3), round(ui.resultados_mx[i+4],3)),
                                   (ui.pontos_resultado[i]*100, ui.pontos_resultado[i+4]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_mx[i+4],3), round(ui.resultados_mx[i+8],3)),
                                   (ui.pontos_resultado[i+4]*100, ui.pontos_resultado[i+8]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i == last_index:
                line1 = plt.Line2D((0, round(ui.resultados_mx[i],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_mx[i-4],3)),
                                   (ui.pontos_resultado[i-4] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_mx[i - 4],3), round(ui.resultados_mx[i],3)),
                                   (ui.pontos_resultado[i - 4] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_mx[i - 8],3), round(ui.resultados_mx[i-4],3)),
                                   (ui.pontos_resultado[i - 8] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i not in [1, 2, 3, 4, 5, 6, 7,
                           last_index - 1, last_index -2, last_index -3,
                           last_index - 4, last_index -5, last_index -6, last_index-7]:
                line1 = plt.Line2D((0, round(ui.resultados_mx[i],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line2 = plt.Line2D((round(ui.resultados_mx[i],3), round(ui.resultados_mx[i+1],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i+1] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

        line = plt.Line2D((0, 0), (base, topo), linewidth=3, color='black')
        axes.add_line(line)
        axes.axis('auto')
        axes.set_title('Momento fletor X')
        axes.grid(True)
        axes.set_xlabel('Mx (kN.m)', fontsize=10)
        axes.set_ylabel('L (cm)', fontsize=10)
        axes.plot()
        figure.subplots_adjust(left=0.2, bottom=0.15)
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)

    def resultados_longit_my(self):
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        base = 0
        topo = ui.pontos_resultado[-1] * 100
        max = np.max(ui.resultados_my)
        min = np.min(ui.resultados_my)
        ui.labelVerif.setText('MyMáx = {0:.3f} kN.m - MyMín = {1:.3f} kN.m'.format(max, min))

        last_index = len(ui.resultados_my) - 1
        for i in range(len(ui.resultados_my)):
            if i == 0:
                line1 = plt.Line2D((0, round(ui.resultados_my[i],3)),
                                  (ui.pontos_resultado[i]*100, ui.pontos_resultado[i]*100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_my[i+4],3)),
                                   (ui.pontos_resultado[i+4] * 100, ui.pontos_resultado[i+4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_my[i],3), round(ui.resultados_my[i+4],3)),
                                   (ui.pontos_resultado[i]*100, ui.pontos_resultado[i+4]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_my[i+4],3), round(ui.resultados_my[i+8],3)),
                                   (ui.pontos_resultado[i+4]*100, ui.pontos_resultado[i+8]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i == last_index:
                line1 = plt.Line2D((0, round(ui.resultados_my[i],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_my[i-4],3)),
                                   (ui.pontos_resultado[i-4] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_my[i - 4],3), round(ui.resultados_my[i],3)),
                                   (ui.pontos_resultado[i - 4] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_my[i - 8],3), round(ui.resultados_my[i-4],3)),
                                   (ui.pontos_resultado[i - 8] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i not in [1, 2, 3, 4, 5, 6, 7,
                           last_index - 1, last_index -2, last_index -3,
                           last_index - 4, last_index -5, last_index -6, last_index-7]:
                line1 = plt.Line2D((0, round(ui.resultados_my[i],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line2 = plt.Line2D((round(ui.resultados_my[i],3), round(ui.resultados_my[i+1],3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i+1] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

        line = plt.Line2D((0, 0), (base, topo), linewidth=3, color='black')
        axes.add_line(line)
        axes.axis('auto')
        axes.set_title('Momento fletor Y')
        axes.grid(True)
        axes.set_xlabel('My (kN.m)', fontsize=10)
        axes.set_ylabel('L (cm)', fontsize=10)
        axes.plot()
        figure.subplots_adjust(left=0.2, bottom=0.15)
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)

    def resultados_longit_ux(self):
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        base = 0
        topo = ui.pontos_resultado[-1] * 100
        max = np.max(ui.resultados_ux)*100
        min = np.min(ui.resultados_ux)*100
        ui.labelVerif.setText('uxMáx = {0:.3f} cm - uxMín = {1:.3f} cm'.format(max, min))

        last_index = len(ui.resultados_ux) - 1
        for i in range(len(ui.resultados_ux)):
            if i == 0:
                line1 = plt.Line2D((0, round(ui.resultados_ux[i]*100,3)),
                                  (ui.pontos_resultado[i]*100, ui.pontos_resultado[i]*100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_ux[i+4] * 100,3)),
                                   (round(ui.pontos_resultado[i+4] * 100,3), round(ui.pontos_resultado[i+4] * 100,3)),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_ux[i]*100,3), round(ui.resultados_ux[i+4]*100,3)),
                                   (ui.pontos_resultado[i]*100, ui.pontos_resultado[i+4]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_ux[i+4]*100,3), round(ui.resultados_ux[i+8]*100,3)),
                                   (ui.pontos_resultado[i+4]*100, ui.pontos_resultado[i+8]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)


            elif i == last_index:
                line1 = plt.Line2D((0, round(ui.resultados_ux[i] * 100,3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_ux[i-4] * 100,3)),
                                   (ui.pontos_resultado[i-4] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_ux[i - 4] * 100,3), round(ui.resultados_ux[i] * 100,3)),
                                   (ui.pontos_resultado[i - 4] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_ux[i - 8] * 100,3), round(ui.resultados_ux[i-4] * 100,3)),
                                   (ui.pontos_resultado[i - 8] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i not in [1, 2, 3, 4, 5, 6, 7,
                           last_index - 1, last_index -2, last_index -3,
                           last_index - 4, last_index -5, last_index -6, last_index-7]:
                line1 = plt.Line2D((0, round(ui.resultados_ux[i] * 100,3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line2 = plt.Line2D((round(ui.resultados_ux[i] * 100,3), round(ui.resultados_ux[i+1] * 100,3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i+1] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

        line = plt.Line2D((0, 0), (base, topo), linewidth=3, color='black')
        axes.add_line(line)
        axes.axis('auto')
        axes.set_title('Deslocamentos transversais x')
        axes.grid(True)
        axes.set_xlabel('ux (cm)', fontsize=10)
        axes.set_ylabel('L (cm)', fontsize=10)
        axes.plot()
        figure.subplots_adjust(left=0.2, bottom=0.15)
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)

    def resultados_longit_uy(self):
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        base = 0
        topo = ui.pontos_resultado[-1] * 100
        max = np.max(ui.resultados_uy)*100
        min = np.min(ui.resultados_uy)*100
        ui.labelVerif.setText('uyMáx = {0:.3f} cm - uyMín = {1:.3f} cm'.format(max, min))

        last_index = len(ui.resultados_uy) - 1
        for i in range(len(ui.resultados_uy)):
            if i == 0:
                line1 = plt.Line2D((0, round(ui.resultados_uy[i]*100,3)),
                                  (ui.pontos_resultado[i]*100, ui.pontos_resultado[i]*100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_uy[i+4] * 100,3)),
                                   (ui.pontos_resultado[i+4] * 100, ui.pontos_resultado[i+4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_uy[i]*100,3), round(ui.resultados_uy[i+4]*100,3)),
                                   (ui.pontos_resultado[i]*100, ui.pontos_resultado[i+4]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_uy[i+4]*100,3), round(ui.resultados_uy[i+8]*100,3)),
                                   (ui.pontos_resultado[i+4]*100, ui.pontos_resultado[i+8]*100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)


            elif i == last_index:
                line1 = plt.Line2D((0, round(ui.resultados_uy[i] * 100,3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line1 = plt.Line2D((0, round(ui.resultados_uy[i-4] * 100,3)),
                                   (ui.pontos_resultado[i-4] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)

                line2 = plt.Line2D((round(ui.resultados_uy[i - 4] * 100,3), round(ui.resultados_uy[i] * 100,3)),
                                   (ui.pontos_resultado[i - 4] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

                line2 = plt.Line2D((round(ui.resultados_uy[i - 8] * 100,3), round(ui.resultados_uy[i-4] * 100,3)),
                                   (ui.pontos_resultado[i - 8] * 100, ui.pontos_resultado[i-4] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

            elif i not in [1, 2, 3, 4, 5, 6, 7,
                           last_index - 1, last_index -2, last_index -3,
                           last_index - 4, last_index -5, last_index -6, last_index-7]:
                line1 = plt.Line2D((0, round(ui.resultados_uy[i] * 100,3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i] * 100),
                                   linewidth=0.5,
                                   color='blue')

                axes.add_line(line1)
                line2 = plt.Line2D((round(ui.resultados_uy[i] * 100,3), round(ui.resultados_uy[i+1] * 100,3)),
                                   (ui.pontos_resultado[i] * 100, ui.pontos_resultado[i+1] * 100),
                                   linewidth=1,
                                   color='blue')
                axes.add_line(line2)

        line = plt.Line2D((0, 0), (base, topo), linewidth=3, color='black')
        axes.add_line(line)
        axes.axis('auto')
        axes.set_title('Deslocamentos transversais y')
        axes.grid(True)
        axes.set_xlabel('uy (cm)', fontsize=10)
        axes.set_ylabel('L (cm)', fontsize=10)
        axes.plot()
        figure.subplots_adjust(left=0.2, bottom=0.15)
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)

    def clear_graph(self):
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        axes.grid = False
        axes.plot()
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)

    def resultados_secao(self, index):
        #determinação do Fator de Segurança
        list_angulos = [i for x, y, i in ui.envoltorias[index]]
        list_angulos.sort()
        lista_flatten = ui.envoltorias[index].copy().flatten().tolist()

        #encontrar o angulo da solicitacoes na lista de envoltorias
        point = [ui.solicitacoes[index][0], ui.solicitacoes[index][1]]
        if point[0] == 0:  # SEM LN
            if point[1] > 0:
                angulo_grafico = 90
            elif point[1] < 0:
                angulo_grafico = 270
            else:
                angulo_grafico = 0
        elif (point[0] > 0 and point[1] > 0):  # PRIMEIRO QUADRANTE
            angulo_grafico = math.degrees(math.atan(abs(point[1]) / abs(point[0])))

        elif (point[0] < 0 and point[1] >= 0):  # SEGUNDO QUADRANTE
            angulo_grafico = 180 - math.degrees(math.atan(abs(point[1]) / abs(point[0])))

        elif (point[0] < 0 and point[1] < 0):  # TERCEIRO QUADRANTE
            angulo_grafico = 180 + math.degrees(math.atan(abs(point[1]) / abs(point[0])))

        else:  # QUARTO QUADRANTE
            angulo_grafico = 360 - math.degrees(math.atan(abs(point[1]) / abs(point[0])))

        ponto_anterior = 0
        ponto_posterior = 0

        for i, y in enumerate(list_angulos):
            if y > angulo_grafico:
                ponto_anterior = list_angulos[i - 1]
                ponto_posterior = list_angulos[i]
                break

        x_anterior = lista_flatten[lista_flatten.index(ponto_anterior) - 2]
        x_posterior = lista_flatten[lista_flatten.index(ponto_posterior) - 2]
        y_anterior = lista_flatten[lista_flatten.index(ponto_anterior) - 1]
        y_posterior = lista_flatten[lista_flatten.index(ponto_posterior) - 1]

        if (abs(point[0]) > 0.005 or abs(point[1]) > 0.005):
        #equação da reta na envoltoria
                xr = [x_anterior, x_posterior]
                yr = [y_anterior, y_posterior]
                line_r_coef = np.polyfit(xr, yr, 1)

                #equação da reta da solicitacao
                xs = [0, point[0]]
                ys = [0, point[1]]
                line_s_coef = np.polyfit(xs, ys, 1)

                #achar interseção
                xi = (line_s_coef[1] - line_r_coef[1])/(line_r_coef[0] - line_s_coef[0])
                yi = line_s_coef[0] * xi + line_s_coef[1]

                #fator de segurança
                fs = np.sqrt(xi**2+yi**2)/np.sqrt(point[0]**2 + point[1]**2)

        else:
            fs = 100

        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()
        polygon = [(x, y) for x, y, z in ui.envoltorias[index]]
        point = [(ui.solicitacoes[index][0], ui.solicitacoes[index][1])]
        path = mpltPath.Path(polygon)
        inside = path.contains_points(point)
        point = [ui.solicitacoes[index][0], ui.solicitacoes[index][1]]
        if inside:
            color_point = 'green'
            ui.labelVerif.setText('Mx = {0:.2f} kN.m - My = {1:.2f} kN.m - Fs = {2:.2f} '.format(point[0], point[1], fs))
        else:
            color_point = 'red'
            ui.labelVerif.setText('Mx = {0:.2f} kN.m - My = {1:.2f} kN.m - Fs = {2:.2f} '.format(point[0], point[1], fs))
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro')
            msg.setText('FS < 1, Seção não resiste aos esforços')
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            x = msg.exec_()

        for p in range(len(ui.envoltorias[index])):
            if p < (len(ui.envoltorias[index]) - 1):
                line = plt.Line2D((ui.envoltorias[index][p][0], ui.envoltorias[index][p + 1][0]),
                                  (ui.envoltorias[index][p][1], ui.envoltorias[index][p + 1][1]), linewidth=2,
                                  color='blue')
            else:
                line = plt.Line2D((ui.envoltorias[index][p][0], ui.envoltorias[index][0][0]),
                                  (ui.envoltorias[index][p][1], ui.envoltorias[index][0][1]), linewidth=2,
                                  color='blue')
            axes.add_line(line)

        axes.scatter(ui.solicitacoes[index][0], ui.solicitacoes[index][1], c=color_point)

        axes.axis('equal')
        axes.set_title('Diagrama de Interação para N, Mx, My')
        axes.grid(True)
        axes.set_xlabel('Mx (kN.m)', fontsize=10)
        axes.set_ylabel('My (kN.m)', fontsize=10)
        axes.plot()
        figure.subplots_adjust(left = 0.2, bottom = 0.15)
        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 390, 440)
        scene.addWidget(canvas)
        self.setScene(scene)
        ui.lineSalt.setText(str((ui.altura_corresp[index])*100))

    def update_secao(self):

        """Desenha a seção composta por retangulos
        """
        scene = QtWidgets.QGraphicsScene(self)
        self.scene = scene
        figure = Figure()
        axes = figure.gca()

        rectangles = ui.tableRet.rowCount()
        for i in range(rectangles):
            xr = float(ui.tableRet.item(i, 0).text())
            yr = float(ui.tableRet.item(i, 1).text())
            xcg = float(ui.tableRet.item(i, 2).text())
            ycg = float(ui.tableRet.item(i, 3).text())
            rect = plt.Rectangle((xcg - xr/2, ycg - yr/2), xr, yr, color='grey')
            axes.add_patch(rect)
            vertices = [(xcg - xr/2, ycg - yr/2),
                        (xcg + xr/2, ycg - yr/2),
                        (xcg + xr/2, ycg + yr/2),
                        (xcg - xr/2, ycg + yr/2)]

            for i in range(4):
                if i < 3:
                    line = plt.Line2D((vertices[i][0], vertices[i+1][0]), (vertices[i][1], vertices[i+1][1]), linewidth = 0.3, color='black')
                else:
                    line = plt.Line2D((vertices[i][0], vertices[0][0]), (vertices[i][1], vertices[0][1]), linewidth = 0.3,  color='black')
                axes.add_line(line)


        bars = ui.tableAco.rowCount()
        for i in range(bars):
            diam = float(ui.tableAco.item(i, 0).text())
            xb = float(ui.tableAco.item(i, 1).text())
            yb = float(ui.tableAco.item(i, 2).text())
            bar = plt.Circle((xb, yb), diam/20, color = 'red')
            axes.add_patch(bar)

        max_x = 0
        max_y = 0
        for i in range(rectangles):
            xr = float(ui.tableRet.item(i, 0).text())
            yr = float(ui.tableRet.item(i, 1).text())
            xcg = float(ui.tableRet.item(i, 2).text())
            ycg = float(ui.tableRet.item(i, 3).text())
            if xr/2 + xcg > max_x:
                max_x = xr/2 + xcg
            if yr /2 + ycg > max_y:
                max_y = yr/2 + ycg


        line_x = plt.Line2D((0, max_x + 5), (0,0), linewidth=0.5, color='black')
        line_y = plt.Line2D((0, 0), (0, max_y + 5), linewidth=0.5, color='black')
        axes.add_line(line_x)
        axes.add_line(line_y)
        triang_x = np.array([[max_x + 5, 1.5], [max_x + 5, -1.5], [max_x + 6.5, 0]])
        triang_y = np.array([[-1.5, max_y + 5], [1.5, max_y + 5], [0, max_y + 6.5]])
        tr_x = plt.Polygon(triang_x, color='black')
        tr_y = plt.Polygon(triang_y, color='black')
        axes.text(max_x + 5, 3, 'X')
        axes.text(3, max_y + 5, 'Y')
        axes.add_patch(tr_x)
        axes.add_patch(tr_y)

        axes.axis('equal')
        axes.plot()


        canvas = FigureCanvas(figure)
        canvas.setGeometry(380, 70, 401, 452)
        scene.addWidget(canvas)
        self.setScene(scene)


class FilterDouble(QtCore.QObject):

    def eventFilter(self, widget, event):

        if event.type() == QtCore.QEvent.FocusIn:
            pass#ui.disable_results()

        if event.type() == QtCore.QEvent.FocusOut:
            try:
                numero = float(widget.text())
                widget.setStyleSheet("background-color: white")

            except:
                seguir = False
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle('Erro de entrada de dados')
                msg.setText('Apenas números separados por "."')
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                else:
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                x = msg.exec_()
                widget.setStyleSheet("background-color: yellow")
                QtWidgets.QLineEdit.setFocus(widget)

            else:
                seguir = True

            if seguir:
                return False

            else:
                return True

        else:
            return False

class FilterIntPositive(QtCore.QObject):
    def eventFilter(self, widget, event):

        if event.type() == QtCore.QEvent.FocusIn:
            pass#ui.pilar_results = False

        if event.type() == QtCore.QEvent.FocusOut:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Apenas números inteiros')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            try:
                numero = int(widget.text())

            except:
                seguir = False
                if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                else:
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                x = msg.exec_()
                widget.setStyleSheet("background-color: yellow")
                QtWidgets.QLineEdit.setFocus(widget)
            else:
                if numero > 0:
                    seguir = True
                    widget.setStyleSheet("background-color: white")

                else:
                    seguir = False
                    if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                        ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                    else:
                        ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                    x = msg.exec_()
                    widget.setStyleSheet("background-color: yellow")
                    QtWidgets.QLineEdit.setFocus(widget)

            if seguir:
                return False
            else:
                return True

        else:
            return False


class FilterDoublePostive(QtCore.QObject):
    def eventFilter(self, widget, event):

        if event.type() == QtCore.QEvent.FocusIn:
            pass#ui.pilar_results = False

        if event.type() == QtCore.QEvent.FocusOut:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Apenas números positivos separados por "."')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            try:
                numero = float(widget.text())

            except:
                seguir = False
                if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                else:
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                x = msg.exec_()
                widget.setStyleSheet("background-color: yellow")
                QtWidgets.QLineEdit.setFocus(widget)
            else:
                if numero > 0:
                    seguir = True
                    widget.setStyleSheet("background-color: white")

                else:
                    seguir = False
                    if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                        ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                    else:
                        ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                    x = msg.exec_()
                    widget.setStyleSheet("background-color: yellow")
                    QtWidgets.QLineEdit.setFocus(widget)

            if seguir:
                return False
            else:
                return True
        else:
            return False

class FilterDoubleZero(QtCore.QObject):
    def eventFilter(self, widget, event):

        if event.type() == QtCore.QEvent.FocusIn:
            pass#ui.pilar_results = False

        if event.type() == QtCore.QEvent.FocusOut:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Apenas números positivos separados por "." ou 0')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            try:
                numero = float(widget.text())

            except:
                seguir = False
                if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                else:
                    ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                x = msg.exec_()
                widget.setStyleSheet("background-color: yellow")
                QtWidgets.QLineEdit.setFocus(widget)
            else:
                if numero >= 0:
                    seguir = True
                    widget.setStyleSheet("background-color: white")

                else:
                    seguir = False
                    if isinstance(widget.parent().parent().parent(), QtWidgets.QStackedWidget):
                        ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent())
                    else:
                        ui.error_in_tab = ui.tabWidget.indexOf(widget.parent().parent().parent())
                    x = msg.exec_()
                    widget.setStyleSheet("background-color: yellow")
                    QtWidgets.QLineEdit.setFocus(widget)

            if seguir:
                return False
            else:
                return True
        else:
            return False



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Pilar")
        MainWindow.setEnabled(True)
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self._double_filter = FilterDouble()
        self._int_filter = FilterIntPositive()
        self._posdouble_filter = FilterDoublePostive()
        self._doublezero_filter = FilterDoubleZero()
        self.error_in_tab = None
        self.pilar_results = False


        font1 = QtGui.QFont()
        font1.setFamily("Verdana")
        font1.setPointSize(13)
        font1.setBold(True)
        font1.setItalic(False)
        font1.setUnderline(False)
        font1.setWeight(75)
        font1.setStrikeOut(False)
        font1.setKerning(True)

        font2 = QtGui.QFont()
        font2.setFamily("Verdana")
        font2.setPointSize(13)
        font2.setBold(False)
        font2.setItalic(False)
        font2.setUnderline(False)
        font2.setWeight(50)
        font2.setStrikeOut(False)
        font2.setKerning(True)

        font3 = QtGui.QFont()
        font3.setFamily("Verdana")
        font3.setPointSize(11)
        font3.setBold(True)
        font3.setItalic(False)
        font3.setUnderline(False)
        font3.setWeight(75)
        font3.setStrikeOut(False)
        font3.setKerning(True)

        font4 = QtGui.QFont()
        font4.setFamily("Verdana")
        font4.setPointSize(9)
        font4.setBold(False)
        font4.setItalic(False)
        font4.setUnderline(False)
        font4.setWeight(50)
        font4.setStrikeOut(False)
        font4.setKerning(True)

        font5 = QtGui.QFont()
        font5.setFamily("Verdana")
        font5.setPointSize(8)
        font5.setBold(True)
        font5.setItalic(False)
        font5.setUnderline(False)
        font5.setWeight(75)
        font5.setStrikeOut(False)
        font5.setKerning(True)

        font6 = QtGui.QFont()
        font6.setFamily("Verdana")
        font6.setPointSize(9)
        font6.setBold(True)
        font6.setItalic(False)
        font6.setUnderline(False)
        font6.setWeight(75)
        font6.setStrikeOut(False)
        font6.setKerning(True)

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(-10, 0, 801, 1211))
        self.tabWidget.currentChanged.connect(self.change_tab)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(801, 0))
        self.tabWidget.setFont(font1)
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")


        #ABA GEOMETRIA COMEÇA AQUI
        self.tab_geo = QtWidgets.QWidget()
        self.tab_geo.setEnabled(True)
        self.tab_geo.setFont(font2)
        self.tab_geo.setMouseTracking(False)
        self.tab_geo.setStatusTip("")
        self.tab_geo.setObjectName("tab_geo")

        self.labelImgPil = QtWidgets.QLabel(self.tab_geo)
        self.labelImgPil.setGeometry(QtCore.QRect(380, 70, 401, 452))
        self.labelImgPil.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.labelImgPil.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelImgPil.setLineWidth(1)
        self.labelImgPil.setText("")
        self.labelImgPil.setPixmap(QtGui.QPixmap("pilar2.png"))
        self.labelImgPil.setScaledContents(True)
        self.labelImgPil.setObjectName("labelImgPil")

        self.labelReprSec_2 = QtWidgets.QLabel(self.tab_geo)
        self.labelReprSec_2.setGeometry(QtCore.QRect(380, 20, 401, 41))
        self.labelReprSec_2.setFont(font3)
        self.labelReprSec_2.setAlignment(QtCore.Qt.AlignCenter)
        self.labelReprSec_2.setObjectName("labelReprSec_2")

        #GRUPO CARGAS COMEÇA AQUI
        self.groupCargas = QtWidgets.QGroupBox(self.tab_geo)
        self.groupCargas.setGeometry(QtCore.QRect(20, 275, 326, 247))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupCargas.sizePolicy().hasHeightForWidth())
        self.groupCargas.setSizePolicy(sizePolicy)
        self.groupCargas.setFont(font3)
        self.groupCargas.setObjectName("groupCargas")
        self.formLayout = QtWidgets.QFormLayout(self.groupCargas)
        self.formLayout.setVerticalSpacing(4)
        self.formLayout.setObjectName("formLayout")

        self.labelFzdt = QtWidgets.QLabel(self.groupCargas)
        self.labelFzdt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelFzdt.setFont(font4)
        self.labelFzdt.setTextFormat(QtCore.Qt.AutoText)
        self.labelFzdt.setScaledContents(False)
        self.labelFzdt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelFzdt.setWordWrap(False)
        self.labelFzdt.setObjectName("labelFzdt")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.labelFzdt)
        self.lineFzdt = QtWidgets.QLineEdit(self.groupCargas)
        self.lineFzdt.setEnabled(True)
        self.lineFzdt.setFont(font4)
        self.lineFzdt.setAlignment(QtCore.Qt.AlignCenter)
        self.lineFzdt.setPlaceholderText("")
        self.lineFzdt.setObjectName("lineFzdt")
        self.lineFzdt.installEventFilter(self._double_filter)
        self.lineFzdt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineFzdt)

        self.labelHxdt = QtWidgets.QLabel(self.groupCargas)
        self.labelHxdt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelHxdt.setFont(font4)
        self.labelHxdt.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.labelHxdt.setLineWidth(1)
        self.labelHxdt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelHxdt.setIndent(1)
        self.labelHxdt.setObjectName("labelHxdt")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.labelHxdt)
        self.lineHxdt = QtWidgets.QLineEdit(self.groupCargas)
        self.lineHxdt.setEnabled(True)
        self.lineHxdt.setFont(font4)
        self.lineHxdt.setAlignment(QtCore.Qt.AlignCenter)
        self.lineHxdt.setPlaceholderText("")
        self.lineHxdt.setObjectName("lineHxdt")
        self.lineHxdt.installEventFilter(self._double_filter)
        self.lineHxdt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineHxdt)

        self.labelHydt = QtWidgets.QLabel(self.groupCargas)
        self.labelHydt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelHydt.setFont(font4)
        self.labelHydt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelHydt.setObjectName("labelHydt")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.labelHydt)
        self.lineHydt = QtWidgets.QLineEdit(self.groupCargas)
        self.lineHydt.setEnabled(True)
        self.lineHydt.setFont(font4)
        self.lineHydt.setAlignment(QtCore.Qt.AlignCenter)
        self.lineHydt.setPlaceholderText("")
        self.lineHydt.setObjectName("lineHydt")
        self.lineHydt.installEventFilter(self._double_filter)
        self.lineHydt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineHydt)

        self.labelMxdt = QtWidgets.QLabel(self.groupCargas)
        self.labelMxdt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelMxdt.setFont(font4)
        self.labelMxdt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMxdt.setIndent(-1)
        self.labelMxdt.setObjectName("labelMxdt")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.labelMxdt)
        self.lineMxdt = QtWidgets.QLineEdit(self.groupCargas)
        self.lineMxdt.setEnabled(True)
        self.lineMxdt.setFont(font4)
        self.lineMxdt.setAlignment(QtCore.Qt.AlignCenter)
        self.lineMxdt.setPlaceholderText("")
        self.lineMxdt.setObjectName("lineMxdt")
        self.lineMxdt.installEventFilter(self._double_filter)
        self.lineMxdt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineMxdt)

        self.labelMydt = QtWidgets.QLabel(self.groupCargas)
        self.labelMydt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelMydt.setFont(font4)
        self.labelMydt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMydt.setObjectName("labelMydt")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.labelMydt)
        self.lineMydt = QtWidgets.QLineEdit(self.groupCargas)
        self.lineMydt.setEnabled(True)
        self.lineMydt.setFont(font4)
        self.lineMydt.setAlignment(QtCore.Qt.AlignCenter)
        self.lineMydt.setPlaceholderText("")
        self.lineMydt.setObjectName("lineMydt")
        self.lineMydt.installEventFilter(self._double_filter)
        self.lineMydt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.lineMydt)

        self.labelPxdt = QtWidgets.QLabel(self.groupCargas)
        self.labelPxdt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelPxdt.setFont(font4)
        self.labelPxdt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPxdt.setObjectName("labelPxdt")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.labelPxdt)
        self.linePxdt = QtWidgets.QLineEdit(self.groupCargas)
        self.linePxdt.setEnabled(True)
        self.linePxdt.setFont(font4)
        self.linePxdt.setAlignment(QtCore.Qt.AlignCenter)
        self.linePxdt.setPlaceholderText("")
        self.linePxdt.setObjectName("linePxdt")
        self.linePxdt.installEventFilter(self._double_filter)
        self.linePxdt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.linePxdt)

        self.labelPydt = QtWidgets.QLabel(self.groupCargas)
        self.labelPydt.setMinimumSize(QtCore.QSize(150, 0))
        self.labelPydt.setFont(font4)
        self.labelPydt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPydt.setObjectName("labelPydt")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.labelPydt)
        self.linePydt = QtWidgets.QLineEdit(self.groupCargas)
        self.linePydt.setEnabled(True)
        self.linePydt.setFont(font4)
        self.linePydt.setAlignment(QtCore.Qt.AlignCenter)
        self.linePydt.setPlaceholderText("")
        self.linePydt.setObjectName("linePydt")
        self.linePydt.installEventFilter(self._double_filter)
        self.linePydt.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.linePydt)

        self.labelPxdb = QtWidgets.QLabel(self.groupCargas)
        self.labelPxdb.setMinimumSize(QtCore.QSize(150, 0))
        self.labelPxdb.setFont(font4)
        self.labelPxdb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPxdb.setObjectName("labelPxdb")
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.labelPxdb)
        self.linePxdb = QtWidgets.QLineEdit(self.groupCargas)
        self.linePxdb.setEnabled(True)
        self.linePxdb.setFont(font4)
        self.linePxdb.setAlignment(QtCore.Qt.AlignCenter)
        self.linePxdb.setPlaceholderText("")
        self.linePxdb.setObjectName("linePxdb")
        self.linePxdb.installEventFilter(self._double_filter)
        self.linePxdb.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.linePxdb)

        self.labelPydb = QtWidgets.QLabel(self.groupCargas)
        self.labelPydb.setMinimumSize(QtCore.QSize(150, 0))
        self.labelPydb.setFont(font4)
        self.labelPydb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPydb.setObjectName("labelPydb")
        self.formLayout.setWidget(8, QtWidgets.QFormLayout.LabelRole, self.labelPydb)
        self.linePydb = QtWidgets.QLineEdit(self.groupCargas)
        self.linePydb.setEnabled(True)
        self.linePydb.setFont(font4)
        self.linePydb.setAlignment(QtCore.Qt.AlignCenter)
        self.linePydb.setPlaceholderText("")
        self.linePydb.setObjectName("linePydb")
        self.linePydb.installEventFilter(self._double_filter)
        self.linePydb.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(8, QtWidgets.QFormLayout.FieldRole, self.linePydb)

        self.labelMxdb = QtWidgets.QLabel(self.groupCargas)
        self.labelMxdb.setMinimumSize(QtCore.QSize(150, 0))
        self.labelMxdb.setFont(font4)
        self.labelMxdb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMxdb.setObjectName("labelMxdb")
        self.formLayout.setWidget(9, QtWidgets.QFormLayout.LabelRole, self.labelMxdb)
        self.lineMxdb = QtWidgets.QLineEdit(self.groupCargas)
        self.lineMxdb.setEnabled(True)
        self.lineMxdb.setFont(font4)
        self.lineMxdb.setAlignment(QtCore.Qt.AlignCenter)
        self.lineMxdb.setPlaceholderText("")
        self.lineMxdb.setObjectName("lineMxdb")
        self.lineMxdb.installEventFilter(self._double_filter)
        self.lineMxdb.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(9, QtWidgets.QFormLayout.FieldRole, self.lineMxdb)

        self.labelMydb = QtWidgets.QLabel(self.groupCargas)
        self.labelMydb.setMinimumSize(QtCore.QSize(150, 0))
        self.labelMydb.setFont(font4)
        self.labelMydb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMydb.setObjectName("labelMydb")
        self.formLayout.setWidget(10, QtWidgets.QFormLayout.LabelRole, self.labelMydb)
        self.lineMydb = QtWidgets.QLineEdit(self.groupCargas)
        self.lineMydb.setEnabled(True)
        self.lineMydb.setFont(font4)
        self.lineMydb.setAlignment(QtCore.Qt.AlignCenter)
        self.lineMydb.setPlaceholderText("")
        self.lineMydb.setObjectName("lineMydb")
        self.lineMydb.installEventFilter(self._double_filter)
        self.lineMydb.textChanged.connect(self.disable_results)
        self.formLayout.setWidget(10, QtWidgets.QFormLayout.FieldRole, self.lineMydb)

        #GRUPO GEOMETRIA COMEÇA AQUI
        self.groupGeo = QtWidgets.QGroupBox(self.tab_geo)
        self.groupGeo.setGeometry(QtCore.QRect(20, 10, 326, 266))
        self.groupGeo.setFont(font3)
        self.groupGeo.setObjectName("groupGeo")

        self.gridLayout = QtWidgets.QGridLayout(self.groupGeo)
        self.gridLayout.setVerticalSpacing(4)
        self.gridLayout.setObjectName("gridLayout")

        self.labelComp = QtWidgets.QLabel(self.groupGeo)
        self.labelComp.setFont(font4)
        self.labelComp.setAlignment(QtCore.Qt.AlignCenter)
        self.labelComp.setObjectName("labelComp")
        self.gridLayout.addWidget(self.labelComp, 0, 0, 1, 1)
        self.lineComp = QtWidgets.QLineEdit(self.groupGeo)
        self.lineComp.setEnabled(True)
        self.lineComp.setFont(font4)
        self.lineComp.setAlignment(QtCore.Qt.AlignCenter)
        self.lineComp.setPlaceholderText("")
        self.lineComp.setClearButtonEnabled(False)
        self.lineComp.setObjectName("lineComp")
        self.lineComp.installEventFilter(self._posdouble_filter)
        self.lineComp.textChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.lineComp, 0, 1, 1, 1)

        self.labelRUxb = QtWidgets.QLabel(self.groupGeo)
        self.labelRUxb.setFont(font4)
        self.labelRUxb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRUxb.setObjectName("labelRUxb")
        self.gridLayout.addWidget(self.labelRUxb, 1, 0, 1, 1)
        self.checkBoxRUxb = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRUxb.setEnabled(False)
        self.checkBoxRUxb.setFont(font4)
        self.checkBoxRUxb.setChecked(True)
        self.checkBoxRUxb.setTristate(False)
        self.checkBoxRUxb.setObjectName("checkBoxRUxb")
        self.checkBoxRUxb.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRUxb, 1, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRUyb = QtWidgets.QLabel(self.groupGeo)
        self.labelRUyb.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRUyb.setFont(font4)
        self.labelRUyb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRUyb.setObjectName("labelRUyb")
        self.gridLayout.addWidget(self.labelRUyb, 2, 0, 1, 1)
        self.checkBoxRUyb = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRUyb.setEnabled(False)
        self.checkBoxRUyb.setFont(font4)
        self.checkBoxRUyb.setChecked(True)
        self.checkBoxRUyb.setTristate(False)
        self.checkBoxRUyb.setObjectName("checkBoxRUyb")
        self.checkBoxRUyb.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRUyb, 2, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRUzb = QtWidgets.QLabel(self.groupGeo)
        self.labelRUzb.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRUzb.setFont(font4)
        self.labelRUzb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRUzb.setObjectName("labelRUzb")
        self.gridLayout.addWidget(self.labelRUzb, 3, 0, 1, 1)
        self.checkBoxRUzb = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRUzb.setEnabled(False)
        self.checkBoxRUzb.setFont(font4)
        self.checkBoxRUzb.setChecked(True)
        self.checkBoxRUzb.setTristate(False)
        self.checkBoxRUzb.setObjectName("checkBoxRUzb")
        self.checkBoxRUzb.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRUzb, 3, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRRxb = QtWidgets.QLabel(self.groupGeo)
        self.labelRRxb.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRRxb.setFont(font4)
        self.labelRRxb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRRxb.setObjectName("labelRRxb")
        self.gridLayout.addWidget(self.labelRRxb, 4, 0, 1, 1)
        self.checkBoxRRxb = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRRxb.setEnabled(True)
        self.checkBoxRRxb.setFont(font4)
        self.checkBoxRRxb.setChecked(True)
        self.checkBoxRRxb.setTristate(False)
        self.checkBoxRRxb.setObjectName("checkBoxRRxb")
        self.checkBoxRRxb.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRRxb, 4, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRRyb = QtWidgets.QLabel(self.groupGeo)
        self.labelRRyb.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRRyb.setFont(font4)
        self.labelRRyb.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRRyb.setObjectName("labelRRyb")
        self.gridLayout.addWidget(self.labelRRyb, 5, 0, 1, 1)
        self.checkBoxRRyb = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRRyb.setEnabled(True)
        self.checkBoxRRyb.setFont(font4)
        self.checkBoxRRyb.setChecked(True)
        self.checkBoxRRyb.setTristate(False)
        self.checkBoxRRyb.setObjectName("checkBoxRRyb")
        self.checkBoxRRyb.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRRyb, 5, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRUxt = QtWidgets.QLabel(self.groupGeo)
        self.labelRUxt.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRUxt.setFont(font4)
        self.labelRUxt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRUxt.setObjectName("labelRUxt")
        self.gridLayout.addWidget(self.labelRUxt, 6, 0, 1, 1)
        self.checkBoxRUxt = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRUxt.setEnabled(True)
        self.checkBoxRUxt.setFont(font4)
        self.checkBoxRUxt.setChecked(False)
        self.checkBoxRUxt.setTristate(False)
        self.checkBoxRUxt.setObjectName("checkBoxRUxt")
        self.checkBoxRUxt.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRUxt, 6, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRUyt = QtWidgets.QLabel(self.groupGeo)
        self.labelRUyt.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRUyt.setFont(font4)
        self.labelRUyt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRUyt.setObjectName("labelRUyt")
        self.gridLayout.addWidget(self.labelRUyt, 7, 0, 1, 1)
        self.checkBoxRUyt = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRUyt.setEnabled(True)
        self.checkBoxRUyt.setFont(font4)
        self.checkBoxRUyt.setChecked(False)
        self.checkBoxRUyt.setTristate(False)
        self.checkBoxRUyt.setObjectName("checkBoxRUyt")
        self.checkBoxRUyt.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRUyt, 7, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRUzt = QtWidgets.QLabel(self.groupGeo)
        self.labelRUzt.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRUzt.setFont(font4)
        self.labelRUzt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRUzt.setObjectName("labelRUzt")
        self.gridLayout.addWidget(self.labelRUzt, 8, 0, 1, 1)
        self.checkBoxRUzt = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRUzt.setEnabled(True)
        self.checkBoxRUzt.setFont(font4)
        self.checkBoxRUzt.setChecked(False)
        self.checkBoxRUzt.setTristate(False)
        self.checkBoxRUzt.setObjectName("checkBoxRUzt")
        self.checkBoxRUzt.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRUzt, 8, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRRxt = QtWidgets.QLabel(self.groupGeo)
        self.labelRRxt.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRRxt.setFont(font4)
        self.labelRRxt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRRxt.setObjectName("labelRRxt")
        self.gridLayout.addWidget(self.labelRRxt, 9, 0, 1, 1)
        self.checkBoxRRxt = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRRxt.setEnabled(True)
        self.checkBoxRRxt.setFont(font4)
        self.checkBoxRRxt.setChecked(False)
        self.checkBoxRRxt.setTristate(False)
        self.checkBoxRRxt.setObjectName("checkBoxRRxt")
        self.checkBoxRRxt.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRRxt, 9, 1, 1, 1, QtCore.Qt.AlignHCenter)

        self.labelRRyt = QtWidgets.QLabel(self.groupGeo)
        self.labelRRyt.setMinimumSize(QtCore.QSize(0, 0))
        self.labelRRyt.setFont(font4)
        self.labelRRyt.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.labelRRyt.setAlignment(QtCore.Qt.AlignCenter)
        self.labelRRyt.setObjectName("labelRRyt")
        self.gridLayout.addWidget(self.labelRRyt, 10, 0, 1, 1)
        self.checkBoxRRyt = QtWidgets.QCheckBox(self.groupGeo)
        self.checkBoxRRyt.setEnabled(True)
        self.checkBoxRRyt.setFont(font4)
        self.checkBoxRRyt.setChecked(False)
        self.checkBoxRRyt.setTristate(False)
        self.checkBoxRRyt.setObjectName("checkBoxRRyt")
        self.checkBoxRRyt.stateChanged.connect(self.disable_results)
        self.gridLayout.addWidget(self.checkBoxRRyt, 10, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.tabWidget.addTab(self.tab_geo, "")
        #FIM DA ABA GEOMETRIA


        #ABA MATERIAIS COMEÇA AQUI
        self.tab_mat = QtWidgets.QWidget()
        self.tab_mat.setObjectName("tab_mat")

        self.layoutWidget = QtWidgets.QWidget(self.tab_mat)
        self.layoutWidget.setGeometry(QtCore.QRect(11, 11, 776, 638))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_7.setContentsMargins(5, 0, 0, 120)
        self.gridLayout_7.setHorizontalSpacing(50)
        self.gridLayout_7.setVerticalSpacing(10)
        self.gridLayout_7.setObjectName("gridLayout_7")

        #DIAGRAMA CONCRETO
        self.labelImgConc = QtWidgets.QLabel(self.layoutWidget)
        self.labelImgConc.setMinimumSize(QtCore.QSize(380, 200))
        self.labelImgConc.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.labelImgConc.setText("")
        self.labelImgConc.setPixmap(QtGui.QPixmap("conc1.png"))
        self.labelImgConc.setScaledContents(True)
        self.labelImgConc.setObjectName("labelImgConc")
        self.gridLayout_7.addWidget(self.labelImgConc, 0, 1, 1, 1)

        #DIAGRAMA AÇO
        self.labelImgAco = QtWidgets.QLabel(self.layoutWidget)
        self.labelImgAco.setMinimumSize(QtCore.QSize(380, 200))
        self.labelImgAco.setText("")
        self.labelImgAco.setPixmap(QtGui.QPixmap("aco.png"))
        self.labelImgAco.setScaledContents(True)
        self.labelImgAco.setObjectName("labelImgAco")
        self.gridLayout_7.addWidget(self.labelImgAco, 1, 1, 1, 1)

        #GRUPO ACO COMEÇA AQUI
        self.groupAco = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupAco.setFont(font3)
        self.groupAco.setObjectName("groupAco")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupAco)
        self.gridLayout_3.setVerticalSpacing(4)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.labelModuloE = QtWidgets.QLabel(self.groupAco)
        self.labelModuloE.setFont(font4)
        self.labelModuloE.setAlignment(QtCore.Qt.AlignCenter)
        self.labelModuloE.setObjectName("labelModuloE")
        self.gridLayout_3.addWidget(self.labelModuloE, 2, 0, 1, 1)
        self.lineModuloE = QtWidgets.QLineEdit(self.groupAco)
        self.lineModuloE.setEnabled(False)
        self.lineModuloE.setMinimumSize(QtCore.QSize(60, 0))
        self.lineModuloE.setFont(font4)
        self.lineModuloE.setAlignment(QtCore.Qt.AlignCenter)
        self.lineModuloE.setPlaceholderText("")
        self.lineModuloE.setObjectName("lineModuloE")
        self.lineModuloE.installEventFilter(self._posdouble_filter)
        self.lineModuloE.textChanged.connect(self.disable_results)
        self.gridLayout_3.addWidget(self.lineModuloE, 2, 1, 1, 1)

        self.labelGammaS = QtWidgets.QLabel(self.groupAco)
        self.labelGammaS.setFont(font4)
        self.labelGammaS.setAlignment(QtCore.Qt.AlignCenter)
        self.labelGammaS.setObjectName("labelGammaS")
        self.gridLayout_3.addWidget(self.labelGammaS, 1, 0, 1, 1)
        self.lineGammaS = QtWidgets.QLineEdit(self.groupAco)
        self.lineGammaS.setEnabled(True)
        self.lineGammaS.setFont(font4)
        self.lineGammaS.setAlignment(QtCore.Qt.AlignCenter)
        self.lineGammaS.setPlaceholderText("")
        self.lineGammaS.setObjectName("lineGammaS")
        self.lineGammaS.installEventFilter(self._posdouble_filter)
        self.lineGammaS.textChanged.connect(self.disable_results)
        self.gridLayout_3.addWidget(self.lineGammaS, 1, 1, 1, 1)

        self.labelfyk = QtWidgets.QLabel(self.groupAco)
        self.labelfyk.setMinimumSize(QtCore.QSize(150, 0))
        self.labelfyk.setFont(font4)
        self.labelfyk.setAlignment(QtCore.Qt.AlignCenter)
        self.labelfyk.setObjectName("labelfyk")
        self.gridLayout_3.addWidget(self.labelfyk, 0, 0, 1, 1)
        self.linefyk = QtWidgets.QLineEdit(self.groupAco)
        self.linefyk.setEnabled(True)
        self.linefyk.setFont(font4)
        self.linefyk.setAlignment(QtCore.Qt.AlignCenter)
        self.linefyk.setPlaceholderText("")
        self.linefyk.setObjectName("linefyk")
        self.linefyk.installEventFilter(self._posdouble_filter)
        self.linefyk.textChanged.connect(self.disable_results)
        self.gridLayout_3.addWidget(self.linefyk, 0, 1, 1, 1)

        self.labelesu = QtWidgets.QLabel(self.groupAco)
        self.labelesu.setFont(font4)
        self.labelesu.setAlignment(QtCore.Qt.AlignCenter)
        self.labelesu.setObjectName("labelesu")
        self.gridLayout_3.addWidget(self.labelesu, 3, 0, 1, 1)
        self.lineesu = QtWidgets.QLineEdit(self.groupAco)
        self.lineesu.setEnabled(False)
        self.lineesu.setFont(font4)
        self.lineesu.setAlignment(QtCore.Qt.AlignCenter)
        self.lineesu.setPlaceholderText("")
        self.lineesu.setObjectName("lineesu")
        self.lineesu.installEventFilter(self._posdouble_filter)
        self.lineesu.textChanged.connect(self.disable_results)
        self.gridLayout_3.addWidget(self.lineesu, 3, 1, 1, 1)
        self.gridLayout_7.addWidget(self.groupAco, 1, 0, 1, 1)
        #FIM DO GRUPO ACO

        #GRUPO CONCRETO COMEÇA AQUI
        self.groupConc = QtWidgets.QGroupBox(self.layoutWidget)
        self.groupConc.setFont(font3)
        self.groupConc.setObjectName("groupConc")

        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupConc)
        self.gridLayout_2.setVerticalSpacing(5)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.labelGammaC = QtWidgets.QLabel(self.groupConc)
        self.labelGammaC.setFont(font4)
        self.labelGammaC.setAlignment(QtCore.Qt.AlignCenter)
        self.labelGammaC.setObjectName("labelGammaC")
        self.gridLayout_2.addWidget(self.labelGammaC, 1, 0, 1, 1)
        self.lineGammaC = QtWidgets.QLineEdit(self.groupConc)
        self.lineGammaC.setEnabled(True)
        self.lineGammaC.setFont(font4)
        self.lineGammaC.setAlignment(QtCore.Qt.AlignCenter)
        self.lineGammaC.setPlaceholderText("")
        self.lineGammaC.setObjectName("lineGammaC")
        self.lineGammaC.installEventFilter(self._posdouble_filter)
        self.lineGammaC.textChanged.connect(self.disable_results)
        self.gridLayout_2.addWidget(self.lineGammaC, 1, 1, 1, 1)

        self.labelAlfa = QtWidgets.QLabel(self.groupConc)
        self.labelAlfa.setFont(font4)
        self.labelAlfa.setAlignment(QtCore.Qt.AlignCenter)
        self.labelAlfa.setObjectName("labelAlfa")
        self.gridLayout_2.addWidget(self.labelAlfa, 3, 0, 1, 1)
        self.lineAlfa = QtWidgets.QLineEdit(self.groupConc)
        self.lineAlfa.setEnabled(False)
        self.lineAlfa.setFont(font4)
        self.lineAlfa.setAlignment(QtCore.Qt.AlignCenter)
        self.lineAlfa.setPlaceholderText("")
        self.lineAlfa.setObjectName("lineAlfa")
        self.lineAlfa.installEventFilter(self._posdouble_filter)
        self.lineAlfa.textChanged.connect(self.disable_results)
        self.gridLayout_2.addWidget(self.lineAlfa, 3, 1, 1, 1)

        self.labelBeta = QtWidgets.QLabel(self.groupConc)
        self.labelBeta.setFont(font4)
        self.labelBeta.setAlignment(QtCore.Qt.AlignCenter)
        self.labelBeta.setObjectName("labelBeta")
        self.gridLayout_2.addWidget(self.labelBeta, 2, 0, 1, 1)
        self.lineBeta = QtWidgets.QLineEdit(self.groupConc)
        self.lineBeta.setEnabled(False)
        self.lineBeta.setFont(font4)
        self.lineBeta.setAlignment(QtCore.Qt.AlignCenter)
        self.lineBeta.setPlaceholderText("")
        self.lineBeta.setObjectName("lineBeta")
        self.lineBeta.installEventFilter(self._posdouble_filter)
        self.lineBeta.textChanged.connect(self.disable_results)
        self.gridLayout_2.addWidget(self.lineBeta, 2, 1, 1, 1)

        self.labelfck = QtWidgets.QLabel(self.groupConc)
        self.labelfck.setMinimumSize(QtCore.QSize(150, 0))
        self.labelfck.setFont(font4)
        self.labelfck.setAlignment(QtCore.Qt.AlignCenter)
        self.labelfck.setObjectName("labelfck")
        self.gridLayout_2.addWidget(self.labelfck, 0, 0, 1, 1)
        self.linefck = QtWidgets.QLineEdit(self.groupConc)
        self.linefck.setEnabled(True)
        self.linefck.setFont(font4)
        self.linefck.setAlignment(QtCore.Qt.AlignCenter)
        self.linefck.setPlaceholderText("")
        self.linefck.setObjectName("linefck")
        self.linefck.installEventFilter(self._posdouble_filter)
        self.linefck.textChanged.connect(self.disable_results)
        self.gridLayout_2.addWidget(self.linefck, 0, 1, 1, 1)

        self.labelflu = QtWidgets.QLabel(self.groupConc)
        self.labelflu.setFont(font4)
        self.labelflu.setAlignment(QtCore.Qt.AlignCenter)
        self.labelflu.setObjectName("labelflu")
        self.gridLayout_2.addWidget(self.labelflu, 4, 0, 1, 1)
        self.lineflu = QtWidgets.QLineEdit(self.groupConc)
        self.lineflu.setEnabled(True)
        self.lineflu.setMinimumSize(QtCore.QSize(60, 0))
        self.lineflu.setFont(font4)
        self.lineflu.setAlignment(QtCore.Qt.AlignCenter)
        self.lineflu.setPlaceholderText("")
        self.lineflu.setObjectName("lineflu")
        self.lineflu.installEventFilter(self._doublezero_filter)
        self.lineflu.textChanged.connect(self.disable_results)
        self.gridLayout_2.addWidget(self.lineflu, 4, 1, 1, 1)

        self.radioButton6118 = QtWidgets.QRadioButton(self.groupConc)
        self.radioButton6118.setEnabled(False)
        self.radioButton6118.setFont(font4)
        self.radioButton6118.setObjectName("radioButton6118")
        self.gridLayout_2.addWidget(self.radioButton6118, 5, 0, 1, 2)

        self.radioButtonAraujo = QtWidgets.QRadioButton(self.groupConc)
        self.radioButtonAraujo.setEnabled(False)
        self.radioButtonAraujo.setFont(font4)
        self.radioButtonAraujo.setChecked(True)
        self.radioButtonAraujo.setObjectName("radioButtonAraujo")
        self.gridLayout_2.addWidget(self.radioButtonAraujo, 6, 0, 1, 1)

        self.radioButtonCEB = QtWidgets.QRadioButton(self.groupConc)
        self.radioButtonCEB.setEnabled(False)
        self.radioButtonCEB.setFont(font4)
        self.radioButtonCEB.setObjectName("radioButtonCEB")
        self.gridLayout_2.addWidget(self.radioButtonCEB, 7, 0, 1, 1)
        self.gridLayout_7.addWidget(self.groupConc, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_mat, "")
        #FIM DO GRUPO CONCRETO
        #FIM DA ABA MATERIAIS

        #ABA SECAO TRANSVERSAL COMEÇA AQUI
        self.tab_sec = QtWidgets.QWidget()
        self.tab_sec.setObjectName("tab_sec")

        #GRUPO ADD RET COMEÇA AQUI
        self.groupAddRet = QtWidgets.QGroupBox(self.tab_sec)
        self.groupAddRet.setGeometry(QtCore.QRect(15, 10, 342, 111))
        self.groupAddRet.setFont(font3)
        self.groupAddRet.setObjectName("groupAddRet")

        self.gridLayout_8 = QtWidgets.QGridLayout(self.groupAddRet)
        self.gridLayout_8.setObjectName("gridLayout_8")

        self.labelXRet = QtWidgets.QLabel(self.groupAddRet)
        self.labelXRet.setMaximumSize(QtCore.QSize(60, 40))
        self.labelXRet.setFont(font4)
        self.labelXRet.setAlignment(QtCore.Qt.AlignCenter)
        self.labelXRet.setObjectName("labelXRet")
        self.gridLayout_8.addWidget(self.labelXRet, 0, 0, 1, 1)
        self.lineXRet = QtWidgets.QLineEdit(self.groupAddRet)
        self.lineXRet.setEnabled(True)
        self.lineXRet.setFont(font4)
        self.lineXRet.setAlignment(QtCore.Qt.AlignCenter)
        self.lineXRet.setPlaceholderText("")
        self.lineXRet.setClearButtonEnabled(False)
        self.lineXRet.setObjectName("lineXRet")
        self.lineXRet.installEventFilter(self._double_filter)
        self.gridLayout_8.addWidget(self.lineXRet, 0, 1, 1, 1)

        self.labelYRet = QtWidgets.QLabel(self.groupAddRet)
        self.labelYRet.setEnabled(True)
        self.labelYRet.setFont(font4)
        self.labelYRet.setAlignment(QtCore.Qt.AlignCenter)
        self.labelYRet.setObjectName("labelYRet")
        self.gridLayout_8.addWidget(self.labelYRet, 0, 2, 1, 1)
        self.lineYRet = QtWidgets.QLineEdit(self.groupAddRet)
        self.lineYRet.setEnabled(True)
        self.lineYRet.setFont(font4)
        self.lineYRet.setAlignment(QtCore.Qt.AlignCenter)
        self.lineYRet.setPlaceholderText("")
        self.lineYRet.setClearButtonEnabled(False)
        self.lineYRet.setObjectName("lineYRet")
        self.lineYRet.installEventFilter(self._double_filter)
        self.gridLayout_8.addWidget(self.lineYRet, 0, 3, 1, 1)

        self.labelXCg = QtWidgets.QLabel(self.groupAddRet)
        self.labelXCg.setMaximumSize(QtCore.QSize(60, 40))
        self.labelXCg.setFont(font4)
        self.labelXCg.setAlignment(QtCore.Qt.AlignCenter)
        self.labelXCg.setObjectName("labelXCg")
        self.gridLayout_8.addWidget(self.labelXCg, 1, 0, 1, 1)
        self.lineXCg = QtWidgets.QLineEdit(self.groupAddRet)
        self.lineXCg.setEnabled(True)
        self.lineXCg.setFont(font4)
        self.lineXCg.setAlignment(QtCore.Qt.AlignCenter)
        self.lineXCg.setPlaceholderText("")
        self.lineXCg.setClearButtonEnabled(False)
        self.lineXCg.setObjectName("lineXCg")
        self.lineXCg.installEventFilter(self._double_filter)
        self.gridLayout_8.addWidget(self.lineXCg, 1, 1, 1, 1)

        self.labelYCg = QtWidgets.QLabel(self.groupAddRet)
        self.labelYCg.setEnabled(True)
        self.labelYCg.setFont(font4)
        self.labelYCg.setAlignment(QtCore.Qt.AlignCenter)
        self.labelYCg.setObjectName("labelYCg")
        self.gridLayout_8.addWidget(self.labelYCg, 1, 2, 1, 1)
        self.lineYCg = QtWidgets.QLineEdit(self.groupAddRet)
        self.lineYCg.setEnabled(True)
        self.lineYCg.setFont(font4)
        self.lineYCg.setAlignment(QtCore.Qt.AlignCenter)
        self.lineYCg.setPlaceholderText("")
        self.lineYCg.setClearButtonEnabled(False)
        self.lineYCg.setObjectName("lineYCg")
        self.lineYCg.installEventFilter(self._double_filter)
        self.gridLayout_8.addWidget(self.lineYCg, 1, 3, 1, 1)

        self.pushButtonAddRet = QtWidgets.QPushButton(self.groupAddRet)
        self.pushButtonAddRet.setFont(font5)
        self.pushButtonAddRet.setObjectName("pushButtonAddRet")
        self.pushButtonAddRet.clicked.connect(self.add_rectangle)
        self.gridLayout_8.addWidget(self.pushButtonAddRet, 2, 0, 1, 2)

        self.pushButtonRemRet = QtWidgets.QPushButton(self.groupAddRet)
        self.pushButtonRemRet.setEnabled(True)
        self.pushButtonRemRet.setFont(font5)
        self.pushButtonRemRet.setObjectName("pushButtonRemRet")
        self.pushButtonRemRet.clicked.connect(self.remove_rectangle)
        self.gridLayout_8.addWidget(self.pushButtonRemRet, 2, 2, 1, 2)
        #FIM DO GRUPO ADD RET


        #GRUPO ADD BAR COMEÇA AQUI
        self.groupAddBar = QtWidgets.QGroupBox(self.tab_sec)
        self.groupAddBar.setGeometry(QtCore.QRect(15, 218, 342, 131))
        self.groupAddBar.setFont(font3)
        self.groupAddBar.setObjectName("groupAddBar")


        self.gridLayout_9 = QtWidgets.QGridLayout(self.groupAddBar)
        self.gridLayout_9.setVerticalSpacing(14)
        self.gridLayout_9.setObjectName("gridLayout_9")

        self.labelDiam = QtWidgets.QLabel(self.groupAddBar)
        self.labelDiam.setFont(font4)
        self.labelDiam.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDiam.setObjectName("labelDiam")
        self.gridLayout_9.addWidget(self.labelDiam, 0, 0, 1, 2)
        self.comboDiam = QtWidgets.QComboBox(self.groupAddBar)
        self.comboDiam.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboDiam.sizePolicy().hasHeightForWidth())
        self.comboDiam.setSizePolicy(sizePolicy)
        self.comboDiam.setFont(font4)
        self.comboDiam.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboDiam.setObjectName("comboDiam")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.comboDiam.addItem("")
        self.gridLayout_9.addWidget(self.comboDiam, 0, 2, 1, 2)

        self.labelXBar = QtWidgets.QLabel(self.groupAddBar)
        self.labelXBar.setMinimumSize(QtCore.QSize(0, 0))
        self.labelXBar.setFont(font4)
        self.labelXBar.setAlignment(QtCore.Qt.AlignCenter)
        self.labelXBar.setObjectName("labelXBar")
        self.gridLayout_9.addWidget(self.labelXBar, 1, 0, 1, 1)
        self.lineXBar = QtWidgets.QLineEdit(self.groupAddBar)
        self.lineXBar.setEnabled(True)
        self.lineXBar.setFont(font4)
        self.lineXBar.setAlignment(QtCore.Qt.AlignCenter)
        self.lineXBar.setPlaceholderText("")
        self.lineXBar.setClearButtonEnabled(False)
        self.lineXBar.setObjectName("lineXBar")
        self.lineXBar.installEventFilter(self._double_filter)
        self.gridLayout_9.addWidget(self.lineXBar, 1, 1, 1, 1)

        self.labelYBar = QtWidgets.QLabel(self.groupAddBar)
        self.labelYBar.setMinimumSize(QtCore.QSize(0, 0))
        self.labelYBar.setFont(font4)
        self.labelYBar.setAlignment(QtCore.Qt.AlignCenter)
        self.labelYBar.setObjectName("labelYBar")
        self.gridLayout_9.addWidget(self.labelYBar, 1, 2, 1, 1)
        self.lineYBar = QtWidgets.QLineEdit(self.groupAddBar)
        self.lineYBar.setEnabled(True)
        self.lineYBar.setFont(font4)
        self.lineYBar.setAlignment(QtCore.Qt.AlignCenter)
        self.lineYBar.setPlaceholderText("")
        self.lineYBar.setClearButtonEnabled(False)
        self.lineYBar.setObjectName("lineYBar")
        self.lineYBar.installEventFilter(self._double_filter)
        self.gridLayout_9.addWidget(self.lineYBar, 1, 3, 1, 1)

        self.pushButtonAddBar = QtWidgets.QPushButton(self.groupAddBar)
        self.pushButtonAddBar.setFont(font5)
        self.pushButtonAddBar.setObjectName("pushButtonAddBar")
        self.pushButtonAddBar.clicked.connect(self.add_bar)
        self.gridLayout_9.addWidget(self.pushButtonAddBar, 2, 0, 1, 2)

        self.pushButtonRemBar = QtWidgets.QPushButton(self.groupAddBar)
        self.pushButtonRemBar.setEnabled(True)
        self.pushButtonRemBar.setFont(font5)
        self.pushButtonRemBar.setObjectName("pushButtonRemBar")
        self.pushButtonRemBar.clicked.connect(self.remove_bar)
        self.gridLayout_9.addWidget(self.pushButtonRemBar, 2, 2, 1, 2)
        #FIM DO GRUPO ADD BAR

        #GRUPO TABELA RETANGULOS COMECA AQUI
        self.tableRet = QtWidgets.QTableWidget(self.tab_sec)
        self.tableRet.setGeometry(QtCore.QRect(15, 130, 342, 81))
        self.tableRet.setFont(font4)
        self.tableRet.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tableRet.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tableRet.setAlternatingRowColors(True)
        self.tableRet.setShowGrid(True)
        self.tableRet.setObjectName("tableRet")
        self.tableRet.setColumnCount(4)
        self.tableRet.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableRet.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableRet.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableRet.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableRet.setHorizontalHeaderItem(3, item)
        self.tableRet.horizontalHeader().setCascadingSectionResizes(False)
        self.tableRet.horizontalHeader().setDefaultSectionSize(83)
        self.tableRet.horizontalHeader().setMinimumSectionSize(20)
        self.tableRet.horizontalHeader().setSortIndicatorShown(False)
        self.tableRet.verticalHeader().setDefaultSectionSize(20)
        self.tableRet.verticalHeader().setMinimumSectionSize(20)
        self.tableRet.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

        self.tableAco = QtWidgets.QTableWidget(self.tab_sec)
        self.tableAco.setGeometry(QtCore.QRect(15, 350, 342, 171))
        self.tableAco.setFont(font4)
        self.tableAco.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tableAco.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tableAco.setAlternatingRowColors(True)
        self.tableAco.setShowGrid(True)
        self.tableAco.setObjectName("tableAco")
        self.tableAco.setColumnCount(3)
        self.tableAco.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableAco.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableAco.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableAco.setHorizontalHeaderItem(2, item)
        self.tableAco.horizontalHeader().setCascadingSectionResizes(False)
        self.tableAco.horizontalHeader().setDefaultSectionSize(110)
        self.tableAco.horizontalHeader().setMinimumSectionSize(20)
        self.tableAco.horizontalHeader().setSortIndicatorShown(False)
        self.tableAco.verticalHeader().setDefaultSectionSize(20)
        self.tableAco.verticalHeader().setMinimumSectionSize(20)
        self.tableAco.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

        self.graphicsSecao = MyView(self.tab_sec)
        self.graphicsSecao.setGeometry(QtCore.QRect(380, 70, 401, 452))
        self.graphicsSecao.setObjectName("graphicsSecao")
        self.labelReprSec = QtWidgets.QLabel(self.tab_sec)
        self.labelReprSec.setGeometry(QtCore.QRect(380, 20, 401, 41))

        self.labelReprSec.setFont(font3)
        self.labelReprSec.setAlignment(QtCore.Qt.AlignCenter)
        self.labelReprSec.setObjectName("labelReprSec")
        self.tabWidget.addTab(self.tab_sec, "")
        #FIM DA ABA SECAO TRANSVERSAL

        #ABA CRITERIOS COMEÇA AQUI
        self.tab_calc = QtWidgets.QWidget()
        self.tab_calc.setObjectName("tab_calc")
        self.groupCrit = QtWidgets.QGroupBox(self.tab_calc)
        self.groupCrit.setEnabled(True)
        self.groupCrit.setGeometry(QtCore.QRect(15, 10, 342, 265))
        self.groupCrit.setFont(font3)

        #GRUPO CRITERIOS COMEÇA AQUI
        self.groupCrit.setObjectName("groupCrit")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupCrit)
        self.gridLayout_4.setVerticalSpacing(10)
        self.gridLayout_4.setObjectName("gridLayout_4")

        self.labelTolF = QtWidgets.QLabel(self.groupCrit)
        self.labelTolF.setFont(font4)
        self.labelTolF.setAlignment(QtCore.Qt.AlignCenter)
        self.labelTolF.setObjectName("labelTolF")
        self.gridLayout_4.addWidget(self.labelTolF, 7, 0, 1, 1)

        self.labelTolNd = QtWidgets.QLabel(self.groupCrit)
        self.labelTolNd.setFont(font4)
        self.labelTolNd.setAlignment(QtCore.Qt.AlignCenter)
        self.labelTolNd.setObjectName("labelTolNd")
        self.gridLayout_4.addWidget(self.labelTolNd, 8, 0, 1, 1)

        self.lineNCar = QtWidgets.QLineEdit(self.groupCrit)
        self.lineNCar.setEnabled(True)
        self.lineNCar.setFont(font4)
        self.lineNCar.setAlignment(QtCore.Qt.AlignCenter)
        self.lineNCar.setPlaceholderText("")
        self.lineNCar.setObjectName("lineNCar")
        self.lineNCar.installEventFilter(self._int_filter)
        self.lineNCar.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.lineNCar, 4, 1, 1, 1)

        self.labelDiscX = QtWidgets.QLabel(self.groupCrit)
        self.labelDiscX.setFont(font4)
        self.labelDiscX.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDiscX.setObjectName("labelDiscX")
        self.gridLayout_4.addWidget(self.labelDiscX, 1, 0, 1, 1)

        self.labelMaxIter = QtWidgets.QLabel(self.groupCrit)
        self.labelMaxIter.setFont(font4)
        self.labelMaxIter.setAlignment(QtCore.Qt.AlignCenter)
        self.labelMaxIter.setObjectName("labelMaxIter")
        self.gridLayout_4.addWidget(self.labelMaxIter, 5, 0, 1, 1)

        self.labelTolU = QtWidgets.QLabel(self.groupCrit)
        self.labelTolU.setFont(font4)
        self.labelTolU.setAlignment(QtCore.Qt.AlignCenter)
        self.labelTolU.setObjectName("labelTolU")
        self.gridLayout_4.addWidget(self.labelTolU, 6, 0, 1, 1)

        self.lineTolU = QtWidgets.QLineEdit(self.groupCrit)
        self.lineTolU.setEnabled(True)
        self.lineTolU.setFont(font4)
        self.lineTolU.setAlignment(QtCore.Qt.AlignCenter)
        self.lineTolU.setPlaceholderText("")
        self.lineTolU.setObjectName("lineTolU")
        self.lineTolU.installEventFilter(self._posdouble_filter)
        self.lineTolU.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.lineTolU, 6, 1, 1, 1)

        self.lineDiscX = QtWidgets.QLineEdit(self.groupCrit)
        self.lineDiscX.setEnabled(True)
        self.lineDiscX.setFont(font4)
        self.lineDiscX.setFrame(True)
        self.lineDiscX.setAlignment(QtCore.Qt.AlignCenter)
        self.lineDiscX.setPlaceholderText("")
        self.lineDiscX.setObjectName("lineDiscX")
        self.lineDiscX.installEventFilter(self._int_filter)
        self.lineDiscX.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.lineDiscX, 1, 1, 1, 1)

        self.lineMaxIter = QtWidgets.QLineEdit(self.groupCrit)
        self.lineMaxIter.setEnabled(True)
        self.lineMaxIter.setFont(font4)
        self.lineMaxIter.setAlignment(QtCore.Qt.AlignCenter)
        self.lineMaxIter.setPlaceholderText("")
        self.lineMaxIter.setObjectName("lineMaxIter")
        self.lineMaxIter.installEventFilter(self._int_filter)
        self.lineMaxIter.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.lineMaxIter, 5, 1, 1, 1)

        self.labelNrFem = QtWidgets.QLabel(self.groupCrit)
        self.labelNrFem.setFont(font4)
        self.labelNrFem.setAlignment(QtCore.Qt.AlignCenter)
        self.labelNrFem.setObjectName("labelNrFem")
        self.gridLayout_4.addWidget(self.labelNrFem, 0, 0, 1, 1)

        self.lineTolNd = QtWidgets.QLineEdit(self.groupCrit)
        self.lineTolNd.setEnabled(True)
        self.lineTolNd.setFont(font4)
        self.lineTolNd.setAlignment(QtCore.Qt.AlignCenter)
        self.lineTolNd.setPlaceholderText("")
        self.lineTolNd.setObjectName("lineTolNd")
        self.lineTolNd.installEventFilter(self._posdouble_filter)
        self.lineTolNd.textChanged.connect(self.disable_results)

        self.gridLayout_4.addWidget(self.lineTolNd, 8, 1, 1, 1)
        self.labelDiscY = QtWidgets.QLabel(self.groupCrit)
        self.labelDiscY.setFont(font4)
        self.labelDiscY.setAlignment(QtCore.Qt.AlignCenter)
        self.labelDiscY.setObjectName("labelDiscY")
        self.gridLayout_4.addWidget(self.labelDiscY, 2, 0, 1, 1)

        self.labelNCar = QtWidgets.QLabel(self.groupCrit)
        self.labelNCar.setMinimumSize(QtCore.QSize(150, 0))
        self.labelNCar.setFont(font4)
        self.labelNCar.setAlignment(QtCore.Qt.AlignCenter)
        self.labelNCar.setObjectName("labelNCar")
        self.gridLayout_4.addWidget(self.labelNCar, 4, 0, 1, 1)

        self.lineTolF = QtWidgets.QLineEdit(self.groupCrit)
        self.lineTolF.setEnabled(True)
        self.lineTolF.setFont(font4)
        self.lineTolF.setAlignment(QtCore.Qt.AlignCenter)
        self.lineTolF.setPlaceholderText("")
        self.lineTolF.setObjectName("lineTolF")
        self.lineTolF.installEventFilter(self._posdouble_filter)
        self.lineTolF.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.lineTolF, 7, 1, 1, 1)

        self.lineNrFem = QtWidgets.QLineEdit(self.groupCrit)
        self.lineNrFem.setEnabled(True)
        self.lineNrFem.setFont(font4)
        self.lineNrFem.setAlignment(QtCore.Qt.AlignCenter)
        self.lineNrFem.setPlaceholderText("")
        self.lineNrFem.setObjectName("lineNrFem")
        self.lineNrFem.installEventFilter(self._int_filter)
        self.lineNrFem.textChanged.connect(self.disable_results)

        self.gridLayout_4.addWidget(self.lineNrFem, 0, 1, 1, 1)

        self.lineDiscY = QtWidgets.QLineEdit(self.groupCrit)
        self.lineDiscY.setEnabled(True)
        self.lineDiscY.setFont(font4)
        self.lineDiscY.setAlignment(QtCore.Qt.AlignCenter)
        self.lineDiscY.setPlaceholderText("")
        self.lineDiscY.setObjectName("lineDiscY")
        self.lineDiscY.installEventFilter(self._int_filter)
        self.lineDiscY.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.lineDiscY, 2, 1, 1, 1)

        self.labelPontDiag = QtWidgets.QLabel(self.groupCrit)
        self.labelPontDiag.setMinimumSize(QtCore.QSize(150, 0))
        self.labelPontDiag.setFont(font4)
        self.labelPontDiag.setAlignment(QtCore.Qt.AlignCenter)
        self.labelPontDiag.setObjectName("labelPontDiag")
        self.gridLayout_4.addWidget(self.labelPontDiag, 3, 0, 1, 1)

        self.linePontDiag = QtWidgets.QLineEdit(self.groupCrit)
        self.linePontDiag.setEnabled(True)
        self.linePontDiag.setFont(font4)
        self.linePontDiag.setAlignment(QtCore.Qt.AlignCenter)
        self.linePontDiag.setPlaceholderText("")
        self.linePontDiag.setObjectName("linePontDiag")
        self.linePontDiag.installEventFilter(self._int_filter)
        self.linePontDiag.textChanged.connect(self.disable_results)
        self.gridLayout_4.addWidget(self.linePontDiag, 3, 1, 1, 1)
        #FIM DO GRUPO CRITERIOS

        self.pushButtonCalc = QtWidgets.QPushButton(self.tab_calc)
        self.pushButtonCalc.setGeometry(QtCore.QRect(15, 276, 342, 41))
        self.pushButtonCalc.setFont(font3)
        self.pushButtonCalc.setObjectName("pushButtonCalc")
        self.pushButtonCalc.clicked.connect(self.calcular_click)

        #GRUPO RESULTADOS LONGITUDINAIS COMEÇA AQUI
        self.groupResL = QtWidgets.QGroupBox(self.tab_calc)
        self.groupResL.setGeometry(QtCore.QRect(15, 320, 342, 71))
        self.groupResL.setFont(font3)
        self.groupResL.setObjectName("groupResL")

        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupResL)
        self.gridLayout_5.setVerticalSpacing(14)
        self.gridLayout_5.setObjectName("gridLayout_5")

        self.graphicsRes = MyView(self.tab_calc)
        self.graphicsRes.setEnabled(True)
        self.graphicsRes.setGeometry(QtCore.QRect(380, 70, 401, 452))
        self.graphicsRes.setObjectName("graphicsRes")

        self.pushButtonLuy = QtWidgets.QPushButton(self.groupResL)
        self.pushButtonLuy.setEnabled(False)
        self.pushButtonLuy.setFont(font6)
        self.pushButtonLuy.setObjectName("pushButtonLuy")
        self.pushButtonLuy.clicked.connect(self.graphicsRes.resultados_longit_uy)
        self.gridLayout_5.addWidget(self.pushButtonLuy, 0, 4, 1, 1)

        self.pushButtonLux = QtWidgets.QPushButton(self.groupResL)
        self.pushButtonLux.setEnabled(False)
        self.pushButtonLux.setFont(font6)
        self.pushButtonLux.setObjectName("pushButtonLux")
        self.pushButtonLux.clicked.connect(self.graphicsRes.resultados_longit_ux)
        self.gridLayout_5.addWidget(self.pushButtonLux, 0, 3, 1, 1)

        self.pushButtonLMy = QtWidgets.QPushButton(self.groupResL)
        self.pushButtonLMy.setEnabled(False)
        self.pushButtonLMy.setFont(font6)
        self.pushButtonLMy.setObjectName("pushButtonLMy")
        self.pushButtonLMy.clicked.connect(self.graphicsRes.resultados_longit_my)
        self.gridLayout_5.addWidget(self.pushButtonLMy, 0, 2, 1, 1)

        self.pushButtonLMx = QtWidgets.QPushButton(self.groupResL)
        self.pushButtonLMx.setEnabled(False)
        self.pushButtonLMx.setFont(font6)
        self.pushButtonLMx.setObjectName("pushButtonLMx")
        self.pushButtonLMx.clicked.connect(self.graphicsRes.resultados_longit_mx)
        self.gridLayout_5.addWidget(self.pushButtonLMx, 0, 1, 1, 1)

        self.pushButtonLN = QtWidgets.QPushButton(self.groupResL)
        self.pushButtonLN.setEnabled(False)
        self.pushButtonLN.setFont(font6)
        self.pushButtonLN.setObjectName("pushButtonLN")
        self.pushButtonLN.clicked.connect(self.graphicsRes.resultados_longit_nd)
        self.gridLayout_5.addWidget(self.pushButtonLN, 0, 0, 1, 1)
        #FIM DO GRUPO RESULTADOS LONGITUDINAIS

        #GRUPO RESULTADOS TRANSVERSAIS COMEÇA AQUI
        self.groupResS = QtWidgets.QGroupBox(self.tab_calc)
        self.groupResS.setEnabled(True)
        self.groupResS.setGeometry(QtCore.QRect(15, 390, 342, 131))
        self.groupResS.setFont(font3)
        self.groupResS.setObjectName("groupResS")

        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupResS)
        self.gridLayout_6.setHorizontalSpacing(1)
        self.gridLayout_6.setVerticalSpacing(6)
        self.gridLayout_6.setObjectName("gridLayout_6")

        self.lineSalt = QtWidgets.QLineEdit(self.groupResS)
        self.lineSalt.setFont(font4)
        self.lineSalt.setAlignment(QtCore.Qt.AlignCenter)
        self.lineSalt.setObjectName("lineSalt")
        self.gridLayout_6.addWidget(self.lineSalt, 1, 3, 1, 3)

        self.pushButtonMymin = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonMymin.setEnabled(False)
        self.pushButtonMymin.setFont(font6)
        self.pushButtonMymin.setObjectName("pushButtonMymin")
        self.pushButtonMymin.clicked.connect(lambda: self.graphicsRes.resultados_secao(5))
        self.gridLayout_6.addWidget(self.pushButtonMymin, 0, 5, 1, 1)

        self.pushButtonNmax = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonNmax.setEnabled(False)
        self.pushButtonNmax.setFont(font6)
        self.pushButtonNmax.setObjectName("pushButtonNmax")
        self.pushButtonNmax.clicked.connect(lambda: self.graphicsRes.resultados_secao(0))
        self.gridLayout_6.addWidget(self.pushButtonNmax, 0, 0, 1, 1)

        self.pushButtonNmin = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonNmin.setEnabled(False)
        self.pushButtonNmin.setFont(font6)
        self.pushButtonNmin.setObjectName("pushButtonNmin")
        self.pushButtonNmin.clicked.connect(lambda: self.graphicsRes.resultados_secao(1))
        self.gridLayout_6.addWidget(self.pushButtonNmin, 0, 1, 1, 1)

        self.pushButtonMxmax = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonMxmax.setEnabled(False)
        self.pushButtonMxmax.setFont(font6)
        self.pushButtonMxmax.setObjectName("pushButtonMxmax")
        self.pushButtonMxmax.clicked.connect(lambda: self.graphicsRes.resultados_secao(2))
        self.gridLayout_6.addWidget(self.pushButtonMxmax, 0, 2, 1, 1)

        self.pushButtonMxmin = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonMxmin.setEnabled(False)
        self.pushButtonMxmin.setFont(font6)
        self.pushButtonMxmin.setObjectName("pushButtonMxmin")
        self.pushButtonMxmin.clicked.connect(lambda: self.graphicsRes.resultados_secao(3))
        self.gridLayout_6.addWidget(self.pushButtonMxmin, 0, 3, 1, 1)

        self.pushButtonMymax = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonMymax.setEnabled(False)
        self.pushButtonMymax.setFont(font6)
        self.pushButtonMymax.setObjectName("pushButtonMymax")
        self.pushButtonMymax.clicked.connect(lambda: self.graphicsRes.resultados_secao(4))
        self.gridLayout_6.addWidget(self.pushButtonMymax, 0, 4, 1, 1)

        self.pushButtonSalt = QtWidgets.QPushButton(self.groupResS)
        self.pushButtonSalt.setFont(font6)
        self.pushButtonSalt.setObjectName("pushButtonSalt")
        self.gridLayout_6.addWidget(self.pushButtonSalt, 1, 0, 1, 3)

        self.labelVerif = QtWidgets.QLabel(self.tab_calc)
        self.labelVerif.setGeometry(QtCore.QRect(380, 20, 401, 41))
        self.labelVerif.setFont(font6)
        self.labelVerif.setAlignment(QtCore.Qt.AlignCenter)
        self.labelVerif.setObjectName("labelVerif")

        self.groupCrit.raise_()
        self.pushButtonCalc.raise_()
        self.groupResL.raise_()
        self.groupResS.raise_()
        self.graphicsRes.raise_()
        self.labelVerif.raise_()
        self.tabWidget.addTab(self.tab_calc, "")
        #FIM DA ABA CRITERIOS E RESULTADOS

        MainWindow.setCentralWidget(self.centralwidget)
        #FIM DAS ABAS

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuArquivo = QtWidgets.QMenu(self.menubar)
        self.menuArquivo.setObjectName("menuArquivo")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionNovo = QtWidgets.QAction(MainWindow)
        self.actionNovo.setObjectName("actionNovo")
        self.actionAbrir = QtWidgets.QAction(MainWindow)
        self.actionAbrir.setObjectName("actionAbrir")
        self.actionSalvar = QtWidgets.QAction(MainWindow)
        self.actionSalvar.setObjectName("actionSalvar")
        self.actionSalvar_Como = QtWidgets.QAction(MainWindow)
        self.actionSalvar_Como.setObjectName("actionSalvar_Como")
        self.actionSair = QtWidgets.QAction(MainWindow)
        self.actionSair.setObjectName("actionSair")
        self.actionGeometria = QtWidgets.QAction(MainWindow)
        self.actionGeometria.setObjectName("actionGeometria")
        self.actionMateriais = QtWidgets.QAction(MainWindow)
        self.actionMateriais.setObjectName("actionMateriais")
        self.actionSecaoTransversal = QtWidgets.QAction(MainWindow)
        self.actionSecaoTransversal.setObjectName("actionSecaoTransversal")
        self.actionCargas = QtWidgets.QAction(MainWindow)
        self.actionCargas.setObjectName("actionCargas")
        self.actionCalcular = QtWidgets.QAction(MainWindow)
        self.actionCalcular.setEnabled(False)
        self.actionCalcular.setObjectName("actionCalcular")
        self.actionResultados = QtWidgets.QAction(MainWindow)
        self.actionResultados.setEnabled(False)
        self.actionResultados.setObjectName("actionResultados")
        self.menuArquivo.addAction(self.actionNovo)
        self.menuArquivo.addSeparator()
        self.menuArquivo.addAction(self.actionAbrir)
        self.menuArquivo.addAction(self.actionSalvar)
        self.menuArquivo.addAction(self.actionSalvar_Como)
        self.menuArquivo.addSeparator()
        self.menuArquivo.addAction(self.actionSair)
        self.menubar.addAction(self.menuArquivo.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.lineComp, self.checkBoxRRxb)
        MainWindow.setTabOrder(self.checkBoxRRxb, self.checkBoxRRyb)
        MainWindow.setTabOrder(self.checkBoxRRyb, self.checkBoxRUxt)
        MainWindow.setTabOrder(self.checkBoxRUxt, self.checkBoxRUyt)
        MainWindow.setTabOrder(self.checkBoxRUyt, self.checkBoxRUzt)
        MainWindow.setTabOrder(self.checkBoxRUzt, self.checkBoxRRxt)
        MainWindow.setTabOrder(self.checkBoxRRxt, self.checkBoxRRyt)
        MainWindow.setTabOrder(self.checkBoxRRyt, self.lineFzdt)
        MainWindow.setTabOrder(self.lineFzdt, self.lineHxdt)
        MainWindow.setTabOrder(self.lineHxdt, self.lineHydt)
        MainWindow.setTabOrder(self.lineHydt, self.lineMxdt)
        MainWindow.setTabOrder(self.lineMxdt, self.lineMydt)
        MainWindow.setTabOrder(self.lineMydt, self.linePxdt)
        MainWindow.setTabOrder(self.linePxdt, self.linePydt)
        MainWindow.setTabOrder(self.linePydt, self.linePxdb)
        MainWindow.setTabOrder(self.linePxdb, self.linePydb)
        MainWindow.setTabOrder(self.linePydb, self.lineMxdb)
        MainWindow.setTabOrder(self.lineMxdb, self.lineMydb)
        MainWindow.setTabOrder(self.lineMydb, self.linefck)
        MainWindow.setTabOrder(self.linefck, self.lineGammaC)
        MainWindow.setTabOrder(self.lineGammaC, self.lineflu)
        MainWindow.setTabOrder(self.lineflu, self.linefyk)
        MainWindow.setTabOrder(self.linefyk, self.lineGammaS)
        MainWindow.setTabOrder(self.lineGammaS, self.lineXRet)
        MainWindow.setTabOrder(self.lineXRet, self.lineYRet)
        MainWindow.setTabOrder(self.lineYRet, self.lineXCg)
        MainWindow.setTabOrder(self.lineXCg, self.lineYCg)
        MainWindow.setTabOrder(self.lineYCg, self.pushButtonAddRet)
        MainWindow.setTabOrder(self.pushButtonAddRet, self.comboDiam)
        MainWindow.setTabOrder(self.comboDiam, self.lineXBar)
        MainWindow.setTabOrder(self.lineXBar, self.lineYBar)
        MainWindow.setTabOrder(self.lineYBar, self.pushButtonAddBar)
        MainWindow.setTabOrder(self.pushButtonAddBar, self.lineNrFem)
        MainWindow.setTabOrder(self.lineNrFem, self.lineDiscX)
        MainWindow.setTabOrder(self.lineDiscX, self.lineDiscY)
        MainWindow.setTabOrder(self.lineDiscY, self.linePontDiag)
        MainWindow.setTabOrder(self.linePontDiag, self.lineNCar)
        MainWindow.setTabOrder(self.lineNCar, self.lineMaxIter)
        MainWindow.setTabOrder(self.lineMaxIter, self.lineTolU)
        MainWindow.setTabOrder(self.lineTolU, self.lineTolF)
        MainWindow.setTabOrder(self.lineTolF, self.lineTolNd)
        MainWindow.setTabOrder(self.lineTolNd, self.pushButtonCalc)
        MainWindow.setTabOrder(self.pushButtonCalc, self.pushButtonLMx)
        MainWindow.setTabOrder(self.pushButtonLMx, self.pushButtonLMy)
        MainWindow.setTabOrder(self.pushButtonLMy, self.pushButtonLux)
        MainWindow.setTabOrder(self.pushButtonLux, self.pushButtonLuy)
        MainWindow.setTabOrder(self.pushButtonSalt, self.lineSalt)
        MainWindow.setTabOrder(self.tabWidget, self.graphicsSecao)
        MainWindow.setTabOrder(self.graphicsSecao, self.graphicsRes)
        MainWindow.setTabOrder(self.graphicsRes, self.lineBeta)
        MainWindow.setTabOrder(self.lineBeta, self.lineAlfa)
        MainWindow.setTabOrder(self.lineAlfa, self.checkBoxRUyb)
        MainWindow.setTabOrder(self.checkBoxRUyb, self.checkBoxRUzb)
        MainWindow.setTabOrder(self.checkBoxRUzb, self.lineModuloE)
        MainWindow.setTabOrder(self.lineModuloE, self.lineesu)
        MainWindow.setTabOrder(self.lineesu, self.checkBoxRUxb)
        MainWindow.setTabOrder(self.checkBoxRUxb, self.tableAco)
        MainWindow.setTabOrder(self.tableAco, self.pushButtonRemRet)
        MainWindow.setTabOrder(self.pushButtonRemRet, self.tableRet)
        MainWindow.setTabOrder(self.tableRet, self.pushButtonLN)
        MainWindow.setTabOrder(self.pushButtonLN, self.pushButtonRemBar)

    def change_tab(self):
        if self.error_in_tab is not None:
            self.tabWidget.setCurrentIndex(self.error_in_tab)
            self.error_in_tab = None

        else:
            return

    def add_bar(self):
        self.disable_results()
        nr_row = self.tableAco.rowCount()
        diam = self.comboDiam.currentText()
        x = self.lineXBar.text()
        y = self.lineYBar.text()
        dentro_da_secao = False
        overlap = False
        rectangles = self.tableRet.rowCount()
        for i in range(rectangles):
            xr = float(self.tableRet.item(i, 0).text())
            yr = float(self.tableRet.item(i, 1).text())
            xcg = float(self.tableRet.item(i, 2).text())
            ycg = float(self.tableRet.item(i, 3).text())
            xmax = xcg + xr/2
            xmin = xcg - xr/2
            ymax = ycg + yr/2
            ymin = ycg - yr/2
            if (xmin < (float(x) + (float(diam))/20) < xmax) and (ymin < (float(y) + (float(diam))/20) < ymax):
                dentro_da_secao = True

        for i in range(nr_row):
            diamb = (float(self.tableAco.item(i, 0).text()))/10
            xb = float(self.tableAco.item(i, 1).text())
            yb = float(self.tableAco.item(i, 2).text())
            distsq = (float(x) - xb) * (float(x) - xb) + (float(y) - yb) * (float(y) - yb)
            radsumsq = ((float(diam))/20 + diamb/2) * ((float(diam))/20 + diamb/2)
            if distsq < radsumsq:
                overlap = True

        if dentro_da_secao and not overlap:
            self.tableAco.insertRow(nr_row)
            self.tableAco.setItem(nr_row, 0, QtWidgets.QTableWidgetItem(diam))
            self.tableAco.setItem(nr_row, 1, QtWidgets.QTableWidgetItem(x))
            self.tableAco.setItem(nr_row, 2, QtWidgets.QTableWidgetItem(y))
            self.graphicsSecao.update_secao()

        elif not dentro_da_secao:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Barra fora da seção')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            x = msg.exec_()

        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Barra sobreposta')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            x = msg.exec_()

    def disable_results(self):
        self.pilar_results = False
        self.pushButtonLN.setEnabled(False)
        self.pushButtonLMx.setEnabled(False)
        self.pushButtonLMy.setEnabled(False)
        self.pushButtonLux.setEnabled(False)
        self.pushButtonLuy.setEnabled(False)
        self.pushButtonSalt.setEnabled(False)
        self.lineSalt.setEnabled(False)
        self.pushButtonNmax.setEnabled(False)
        self.pushButtonNmin.setEnabled(False)
        self.pushButtonMxmax.setEnabled(False)
        self.pushButtonMxmin.setEnabled(False)
        self.pushButtonMymax.setEnabled(False)
        self.pushButtonMymin.setEnabled(False)
        self.labelVerif.setText("RESULTADOS INDISPONÍVEIS")
        self.graphicsRes.clear_graph()


    def remove_bar(self):
        self.disable_results()
        rows = set()
        for index in self.tableAco.selectedIndexes():
            rows.add(index.row())

        for row in sorted(rows, reverse=True):
            self.tableAco.removeRow(row)

        self.graphicsSecao.update_secao()

    def add_rectangle(self):
        self.disable_results()
        nr_row = self.tableRet.rowCount()
        x = self.lineXRet.text()
        y = self.lineYRet.text()
        xcg = self.lineXCg.text()
        ycg = self.lineYCg.text()
        xmax = float(xcg) + float(x) / 2
        xmin = float(xcg) - float(x) / 2
        ymax = float(ycg) + float(y) / 2
        ymin = float(ycg) - float(y) / 2
        overlap = False
        adjascente = True if nr_row == 0 else False
        for i in range(nr_row):
            xr = float(self.tableRet.item(i, 0).text())
            yr = float(self.tableRet.item(i, 1).text())
            xcgr = float(self.tableRet.item(i, 2).text())
            ycgr = float(self.tableRet.item(i, 3).text())
            xrmax = xcgr + xr/2
            xrmin = xcgr - xr/2
            yrmax = ycgr + yr/2
            yrmin = ycgr - yr/2

            if (xmin < xrmax) and (xmax > xrmin) and (ymin < yrmax) and (ymax > yrmin):
                overlap = True

            if float(y) < yr:
                if xmin == xrmax:
                    if yrmin <= ymin <= yrmax or yrmin <= ymax <= yrmax:
                        adjascente = True
                if xmax == xrmin:
                    if yrmin <= ymin <= yrmax or yrmin <= ymax <= yrmax:
                        adjascente = True
            else:
                if xmin == xrmax:
                    if ymin <= yrmin <= ymax or ymin <= yrmax <= ymax:
                        adjascente = True
                if xmax == xrmin:
                    if ymin <= yrmin <= ymax or ymin <= yrmax <= ymax:
                        adjascente = True
            if float(x) < xr:
                if ymin == yrmax:
                    if xrmin <= xmin <= xrmax or xrmin <= xmax <= xrmax:
                        adjascente = True
                if ymax == yrmin:
                    if xrmin <= xmin <= xrmax or xrmin <= xmax <= xrmax:
                        adjascente = True
            else:
                if ymin == yrmax:
                    if xmin <= xrmin <= xmax or xmin <= xrmax <= xmax:
                        adjascente = True
                if ymax == yrmin:
                    if xmin <= xrmin <= xmax or xmin <= xrmax <= xmax:
                        adjascente = True

        if adjascente and not overlap:
            self.tableRet.insertRow(nr_row)
            self.tableRet.setItem(nr_row, 0, QtWidgets.QTableWidgetItem(x))
            self.tableRet.setItem(nr_row, 1, QtWidgets.QTableWidgetItem(y))
            self.tableRet.setItem(nr_row, 2, QtWidgets.QTableWidgetItem(xcg))
            self.tableRet.setItem(nr_row, 3, QtWidgets.QTableWidgetItem(ycg))
            self.graphicsSecao.update_secao()

        elif overlap:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Sobreposição de Retangulos')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            x = msg.exec_()

        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Retangulos separados')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            x = msg.exec_()


    def remove_rectangle(self):
        self.disable_results()
        rows = set()
        for index in self.tableRet.selectedIndexes():
            rows.add(index.row())

        for row in sorted(rows, reverse=True):
            self.tableRet.removeRow(row)
            self.tableAco.setRowCount(0)

        self.graphicsSecao.update_secao()

    def test_input(self):
        try:
            comp = (float(self.lineComp.text()))  #TODO: TESTANDO UNIDADES
            fz = float(self.lineFzdt.text())
            hxdt = float(self.lineHxdt.text())
            hydt = float(self.lineHydt.text())
            mxdt = float(self.lineMxdt.text())
            mydt = float(self.lineMydt.text())
            pxdt = float(self.linePxdt.text())
            pydt = float(self.linePydt.text())
            pxdb = float(self.linePxdb.text())
            pydb = float(self.linePydb.text())
            mxdb = float(self.lineMxdb.text())
            mydb = float(self.lineMydb.text())
            fck = float(self.linefck.text())
            gamma_c = float(self.lineGammaC.text())
            beta = float(self.lineBeta.text())
            alfa = float(self.lineAlfa.text())
            coef_flu = float(self.lineflu.text())
            fyk = float(self.linefyk.text())
            gamma_s = float(self.lineGammaS.text())
            es = float(self.lineModuloE.text())
            esu = float(self.lineesu.text())
            nr_mef = int(self.lineNrFem.text())
            nr_x = int(self.lineDiscX.text())
            nr_y = int(self.lineDiscY.text())
            pontos_dia = int(self.linePontDiag.text())
            incrementos = int(self.lineNCar.text())
            max_iter = int(self.lineMaxIter.text())
            tol_f = float(self.lineTolF.text())
            tol_u = float(self.lineTolU.text())
            tol_ln = float(self.lineTolNd.text())

        except:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle('Erro de entrada de dados')
            msg.setText('Rever dados de entrada')
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            x = msg.exec_()
            self.disable_results()
            return False

        else:
            if (comp < 0 or fck < 0 or gamma_c < 0 or beta < 0 or alfa < 0 or coef_flu < 0 or fyk < 0 or
                gamma_s < 0 or es < 0 or esu < 0 or nr_mef < 0 or nr_x < 0 or nr_y < 0 or pontos_dia < 0 or
                incrementos < 0 or max_iter < 0 or tol_f < 0 or tol_u < 0 or tol_ln < 0):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle('Erro de entrada de dados')
                msg.setText('Rever dados de entrada')
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                x = msg.exec_()
                return False

            elif self.tableAco.rowCount() < 1 or self.tableRet.rowCount() < 1:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle('Erro de entrada de dados')
                msg.setText('Inserir dados de entrada da seção transversal')
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                x = msg.exec_()
                return False

            else:
                return True


    def calcular_click(self):
        self.pilar_results = False
        valid = self.test_input()
        if not valid:
            return

        else:
            comp = (float(self.lineComp.text()))/100 #TODO: TESTANDO UNIDADES
            if self.checkBoxRUxb.isChecked():
                ruxb = 0
            else:
                ruxb = 1
            if self.checkBoxRUyb.isChecked():
                ruyb = 0
            else:
                ruyb = 1
            if self.checkBoxRUzb.isChecked():
                ruzb = 0
            else:
                ruzb = 1
            if self.checkBoxRRxb.isChecked():
                rrxb = 0
            else:
                rrxb = 1
            if self.checkBoxRRyb.isChecked():
                rryb = 0
            else:
                rryb = 1
            if self.checkBoxRUxt.isChecked():
                ruxt = 0
            else:
                ruxt = 1
            if self.checkBoxRUyt.isChecked():
                ruyt = 0
            else:
                ruyt = 1
            if self.checkBoxRUzt.isChecked():
                ruzt = 0
            else:
                ruzt = 1
            if self.checkBoxRRxt.isChecked():
                rrxt = 0
            else:
                rrxt = 1
            if self.checkBoxRRyt.isChecked():
                rryt = 0
            else:
                rryt = 1
            fzdt = float(self.lineFzdt.text())
            hxdt = float(self.lineHxdt.text())
            hydt = float(self.lineHydt.text())
            mxdt = float(self.lineMxdt.text())
            mydt = float(self.lineMydt.text())
            pxdt = float(self.linePxdt.text())
            pydt = float(self.linePydt.text())
            pxdb = float(self.linePxdb.text())
            pydb = float(self.linePydb.text())
            mxdb = float(self.lineMxdb.text())
            mydb = float(self.lineMydb.text())
            fck = float(self.linefck.text())
            gamma_c = float(self.lineGammaC.text())
            beta = float(self.lineBeta.text())
            alfa = float(self.lineAlfa.text())
            coef_flu = float(self.lineflu.text())
            #TODO: DIAGRAMAS DIFERENTES
            classe_conc = Materiais.Concreto(fck, gamma_c, coef_flu, alfa, beta)

            fyk = float(self.linefyk.text())
            gamma_s = float(self.lineGammaS.text())
            es = float(self.lineModuloE.text())
            esu = float(self.lineesu.text())
            classe_aco = Materiais.Aco(fyk, gamma_s, es, esu)

            list_barras = []
            cont_barras = self.tableAco.rowCount()
            for i in range(cont_barras):
                diam = float(self.tableAco.item(i, 0).text())
                x = float(self.tableAco.item(i, 1).text())
                y = float(self.tableAco.item(i, 2).text())
                new_bar = ElementosDaSecao.BarraDeAco(classe_conc, classe_aco, diam, x, y)
                list_barras.append(new_bar)

            lista_retangulos = []
            cont_retangulos = self.tableRet.rowCount()
            for i in range(cont_retangulos):
                x = float(self.tableRet.item(i, 0).text())
                y = float(self.tableRet.item(i, 1).text())
                xcg = float(self.tableRet.item(i, 2).text())
                ycg = float(self.tableRet.item(i, 3).text())
                new_retangulo = ElementosDaSecao.Retangulo(x, y, xcg, ycg)
                lista_retangulos.append(new_retangulo)

            nr_x = int(self.lineDiscX.text())
            nr_y = int(self.lineDiscY.text())
            secao_transversal = SC.SecaoTransversal(lista_retangulos,
                                                    list_barras,
                                                    classe_conc,
                                                    classe_aco,
                                                    nr_x,
                                                    nr_y)

            nr_mef = int(self.lineNrFem.text())

            comprimento_barfem = comp/nr_mef

            list_nodes_fem = []
            for i in range(nr_mef + 7):  #tava 1
                if i < 4:
                    new_node = MetodoElementosFinitos.NodeFEM(i, i*comprimento_barfem/4)
                    if i == 0:
                        new_node.nodal_loads = np.array([0, 0, -mxdb, 0, mydb])
                        new_node.nodal_restrictions = np.array([ruzb, ruyb, rrxb, ruxb, rryb])

                elif i > nr_mef + 2:
                    new_node = MetodoElementosFinitos.NodeFEM(i, (nr_mef - 2)*comprimento_barfem + (i-nr_mef+2)*comprimento_barfem/4)
                    if i == (nr_mef + 6):
                        new_node.nodal_loads = np.array([-fzdt, hydt, -mxdt, hxdt, mydt])
                        new_node.nodal_restrictions = np.array([ruzt, ruyt, rrxt, ruxt, rryt])

                else:
                    new_node = MetodoElementosFinitos.NodeFEM(i, (i-3)*comprimento_barfem)

                list_nodes_fem.append(new_node)

            list_bars_fem = []
            pontos_py = np.array([pydb, pydt])
            pontos_px = np.array([pxdb, pxdt])
            pontos_comprimento = np.array([0, comp])
            ay_tot, by_tot = np.polyfit(pontos_comprimento, pontos_py, deg=1)
            ax_tot, bx_tot = np.polyfit(pontos_comprimento, pontos_px, deg=1)


            #todo: tirei o peso próprio
            peso_proprio = - (secao_transversal.area_composta * 0.000025)*140

            for i in range(nr_mef + 6):
                new_bar = MetodoElementosFinitos.BarElementFEM(list_nodes_fem[i],
                                                               list_nodes_fem[i + 1],
                                                               list_nodes_fem[i + 1].z_pos - list_nodes_fem[i].z_pos,
                                                               i,
                                                               secao_transversal)

                # PARAMETROS PARA CARGA TRIANGULAR EM CADA ELEMENTO FINITO
                pyd_b_barra = ay_tot * list_nodes_fem[i].z_pos + by_tot
                pyd_t_barra = ay_tot * list_nodes_fem[i + 1].z_pos + by_tot
                pxd_b_barra = ax_tot * list_nodes_fem[i].z_pos + bx_tot
                pxd_t_barra = ax_tot * list_nodes_fem[i + 1].z_pos + bx_tot

                new_bar.linear_loads = np.array([peso_proprio,
                                                 pyd_b_barra,
                                                 pyd_t_barra,
                                                 pxd_b_barra,
                                                 pxd_t_barra])

                list_bars_fem.append(new_bar)

            pontos_dia = int(self.linePontDiag.text())
            incrementos = int(self.lineNCar.text())
            max_iter = int(self.lineMaxIter.text())
            tol_f = float(self.lineTolF.text())
            tol_u = float(self.lineTolU.text())
            tol_ln = float(self.lineTolNd.text())
            pulo_angulo = int(360 / pontos_dia)
            if abs(fzdt) > 10:
                tol_ln = abs(fzdt) * tol_ln
            else:
                tol_ln = 0.001

            pilar = MetodoElementosFinitos.Pilar(list_nodes_fem, list_bars_fem)
            try:
                pilar.first_linear_solve(incrementos)
            except np.linalg.LinAlgError:
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle('Erro de entrada de dados')
                msg.setText('Pilar instável devido às condições de contorno')
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                x = msg.exec_()

            else:
                convergiu = pilar.non_linear_solve(tol_f, tol_u, incrementos, max_iter)

                if convergiu:
                    pontos, ruy, rux, ruz, rnd, rmy, rmx, envoltorias, solicitacoes, altura_corresp, ruptura, rupturaNd = pilar.get_resultados(secao_transversal, tol_ln, pulo_angulo)
                    if not rupturaNd:
                        self.pilar_results = True
                        self.labelVerif.setText('RESULTADOS DISPONÍVEIS')
                        self.pushButtonLN.setEnabled(True)
                        self.pushButtonLMx.setEnabled(True)
                        self.pushButtonLMy.setEnabled(True)
                        self.pushButtonLux.setEnabled(True)
                        self.pushButtonLuy.setEnabled(True)
                        self.pushButtonNmax.setEnabled(True)
                        self.pushButtonNmin.setEnabled(True)
                        self.pushButtonMxmax.setEnabled(True)
                        self.pushButtonMxmin.setEnabled(True)
                        self.pushButtonMymax.setEnabled(True)
                        self.pushButtonMymin.setEnabled(True)
                        self.resultados_uy = ruy
                        self.resultados_ux = rux
                        self.resultados_mx = rmx
                        self.resultados_my = rmy
                        self.resultados_nd = rnd
                        self.pontos_resultado = pontos
                        self.envoltorias = envoltorias
                        self.solicitacoes = solicitacoes
                        self.altura_corresp = altura_corresp
                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle('Resultado')
                        msg.setText('A seção não resiste ao esforço Nd')
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                        self.labelVerif.setText('Resultados não disponíveis')
                        x = msg.exec_()
                        self.disable_results()

                else:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle('Resultado')
                    msg.setText('Cálculo não convergiu')
                    msg.setIcon(QtWidgets.QMessageBox.Critical)
                    msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                    self.labelVerif.setText('Resultados não disponíveis')
                    x = msg.exec_()
                    self.disable_results()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.labelReprSec_2.setText(_translate("MainWindow", "Sentidos Positivos"))
        self.groupCargas.setTitle(_translate("MainWindow", "Cargas"))
        self.labelFzdt.setText(_translate("MainWindow", "Fzd,t (kN)"))
        self.lineFzdt.setText(_translate("MainWindow", "0"))
        self.labelHxdt.setText(_translate("MainWindow", "Hxd,t (kN)"))
        self.lineHxdt.setText(_translate("MainWindow", "0"))
        self.labelHydt.setText(_translate("MainWindow", "Hyd,t (kN)"))
        self.lineHydt.setText(_translate("MainWindow", "0"))
        self.labelMxdt.setText(_translate("MainWindow", "Mxd,t (kN.m)"))
        self.lineMxdt.setText(_translate("MainWindow", "0"))
        self.labelMydt.setText(_translate("MainWindow", "Myd,t (kN.m)"))
        self.lineMydt.setText(_translate("MainWindow", "0"))
        self.labelPxdt.setText(_translate("MainWindow", "pxd,t (kN/m)"))
        self.linePxdt.setText(_translate("MainWindow", "0"))
        self.labelPydt.setText(_translate("MainWindow", "pyd,t (kN/m)"))
        self.linePydt.setText(_translate("MainWindow", "0"))
        self.labelPxdb.setText(_translate("MainWindow", "pxd,b (kN/m)"))
        self.linePxdb.setText(_translate("MainWindow", "0"))
        self.linePydb.setText(_translate("MainWindow", "0"))
        self.labelMxdb.setText(_translate("MainWindow", "Mxd,b (kN.m)"))
        self.lineMxdb.setText(_translate("MainWindow", "0"))
        self.labelMydb.setText(_translate("MainWindow", "Myd,b (kN.m)"))
        self.lineMydb.setText(_translate("MainWindow", "0"))
        self.labelPydb.setText(_translate("MainWindow", "pyd,b (kN/m)"))
        self.groupGeo.setTitle(_translate("MainWindow", "Geometria e Restrições Nodais"))
        self.labelComp.setText(_translate("MainWindow", "Comprimento (cm)"))
        self.lineComp.setText(_translate("MainWindow", "300"))
        self.labelRUxb.setText(_translate("MainWindow", "Restrição Ux,b"))
        self.checkBoxRUxb.setText(_translate("MainWindow", "Fixo"))
        self.labelRUyb.setText(_translate("MainWindow", "Restrição Uy,b"))
        self.labelRUzb.setText(_translate("MainWindow", "Restrição Uz,b"))
        self.labelRRxb.setText(_translate("MainWindow", "Restrição Rx,b"))
        self.labelRRyb.setText(_translate("MainWindow", "Restrição Ry,b"))
        self.labelRUxt.setText(_translate("MainWindow", "Restrição Ux,t"))
        self.labelRUyt.setText(_translate("MainWindow", "Restrição Uy,t"))
        self.labelRUzt.setText(_translate("MainWindow", "Restrição Uz,t"))
        self.labelRRxt.setText(_translate("MainWindow", "Restrição Rx,t"))
        self.labelRRyt.setText(_translate("MainWindow", "Restrição Ry,t"))
        self.checkBoxRUyb.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRUzb.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRRxb.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRRyb.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRUxt.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRUyt.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRUzt.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRRxt.setText(_translate("MainWindow", "Fixo"))
        self.checkBoxRRyt.setText(_translate("MainWindow", "Fixo"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_geo), _translate("MainWindow", "Geometria e Cargas"))
        self.groupAco.setTitle(_translate("MainWindow", "Aço"))
        self.labelModuloE.setText(_translate("MainWindow", "Es (MPa)"))
        self.labelGammaS.setText(_translate("MainWindow", "γs"))
        self.lineModuloE.setText(_translate("MainWindow", "200000"))
        self.linefyk.setText(_translate("MainWindow", "500"))
        self.labelfyk.setText(_translate("MainWindow", "fyk (MPa)"))
        self.lineGammaS.setText(_translate("MainWindow", "1.15"))
        self.labelesu.setText(_translate("MainWindow", "εsu"))
        self.lineesu.setText(_translate("MainWindow", "0.01"))
        self.groupConc.setTitle(_translate("MainWindow", "Concreto"))
        self.labelGammaC.setText(_translate("MainWindow", "γc"))
        self.lineGammaC.setText(_translate("MainWindow", "1.4"))
        self.labelAlfa.setText(_translate("MainWindow", "α"))
        self.lineBeta.setText(_translate("MainWindow", "0.85"))
        self.lineAlfa.setText(_translate("MainWindow", "1.1"))
        self.labelBeta.setText(_translate("MainWindow", "β"))
        self.labelfck.setText(_translate("MainWindow", "fck (MPa)"))
        self.linefck.setText(_translate("MainWindow", "25"))
        self.lineflu.setText(_translate("MainWindow", "2.0"))
        self.labelflu.setText(_translate("MainWindow", "φ (Coef. Fluência)"))
        self.radioButton6118.setText(_translate("MainWindow", "Diagrama NBR 6118 (2014)"))
        self.radioButtonAraujo.setText(_translate("MainWindow", "Diagrama Araújo (2014)"))
        self.radioButtonCEB.setText(_translate("MainWindow", "Diagrama CEB (1993)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_mat), _translate("MainWindow", "Materiais"))
        self.groupAddRet.setTitle(_translate("MainWindow", "Adicionar Retângulo"))
        self.pushButtonAddRet.setText(_translate("MainWindow", "ADICIONAR"))
        self.labelYRet.setText(_translate("MainWindow", "Y (cm)"))
        self.lineYRet.setText(_translate("MainWindow", "40"))
        self.pushButtonRemRet.setText(_translate("MainWindow", "REMOVER"))
        self.labelXRet.setText(_translate("MainWindow", "X (cm)"))
        self.lineXCg.setText(_translate("MainWindow", "0"))
        self.labelYCg.setText(_translate("MainWindow", "Y CG"))
        self.lineXRet.setText(_translate("MainWindow", "25"))
        self.labelXCg.setText(_translate("MainWindow", "X CG"))
        self.lineYCg.setText(_translate("MainWindow", "0"))
        self.groupAddBar.setTitle(_translate("MainWindow", "Adicionar Barra"))
        self.labelYBar.setText(_translate("MainWindow", "Y ( cm)"))
        self.pushButtonAddBar.setText(_translate("MainWindow", "ADICIONAR"))
        self.lineYBar.setText(_translate("MainWindow", "0"))
        self.labelDiam.setText(_translate("MainWindow", "Diâmetro (mm)"))
        self.labelXBar.setText(_translate("MainWindow", "X (cm)"))
        self.pushButtonRemBar.setText(_translate("MainWindow", "REMOVER"))
        self.lineXBar.setText(_translate("MainWindow", "0"))
        self.comboDiam.setCurrentText(_translate("MainWindow", "5.0"))
        self.comboDiam.setItemText(0, _translate("MainWindow", "5.0"))
        self.comboDiam.setItemText(1, _translate("MainWindow", "6.3"))
        self.comboDiam.setItemText(2, _translate("MainWindow", "8.0"))
        self.comboDiam.setItemText(3, _translate("MainWindow", "10.0"))
        self.comboDiam.setItemText(4, _translate("MainWindow", "12.5"))
        self.comboDiam.setItemText(5, _translate("MainWindow", "16.0"))
        self.comboDiam.setItemText(6, _translate("MainWindow", "20.0"))
        self.comboDiam.setItemText(7, _translate("MainWindow", "25.0"))
        self.comboDiam.setItemText(8, _translate("MainWindow", "32.0"))
        self.comboDiam.setItemText(9, _translate("MainWindow", "40.0"))
        item = self.tableRet.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "X "))
        item = self.tableRet.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Y "))
        item = self.tableRet.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "X CG"))
        item = self.tableRet.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Y CG"))
        item = self.tableAco.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ϕ"))
        item = self.tableAco.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "X "))
        item = self.tableAco.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Y "))
        self.labelReprSec.setText(_translate("MainWindow", "Representação da Seção, X 🠚, Y 🠙 "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_sec), _translate("MainWindow", "Seção Transversal"))
        self.groupCrit.setTitle(_translate("MainWindow", "Critérios"))
        self.labelTolF.setText(_translate("MainWindow", "Tolerância δF/F"))
        self.labelTolNd.setText(_translate("MainWindow", "Tolerância LN (Envoltória N - Mx - My)"))
        self.lineNCar.setText(_translate("MainWindow", "5"))
        self.labelDiscX.setText(_translate("MainWindow", "Nr elementos discretizados X (Seção)"))
        self.labelMaxIter.setText(_translate("MainWindow", "Máx iterações por incremento"))
        self.labelTolU.setText(_translate("MainWindow", "Tolerância Δu/u"))
        self.lineTolU.setText(_translate("MainWindow", "0.005"))
        self.lineDiscX.setText(_translate("MainWindow", "20"))
        self.lineMaxIter.setText(_translate("MainWindow", "50"))
        self.labelNrFem.setText(_translate("MainWindow", "Nr elementos finitos"))
        self.lineTolNd.setText(_translate("MainWindow", "0.001"))
        self.labelDiscY.setText(_translate("MainWindow", "Nr elementos discretizados Y (Seção)"))
        self.labelNCar.setText(_translate("MainWindow", "Incrementos de carga"))
        self.lineTolF.setText(_translate("MainWindow", "0.005"))
        self.lineNrFem.setText(_translate("MainWindow", "10"))
        self.lineDiscY.setText(_translate("MainWindow", "20"))
        self.labelPontDiag.setText(_translate("MainWindow", "Pontos Diagrama N - Mx - My"))
        self.linePontDiag.setText(_translate("MainWindow", "45"))
        self.pushButtonCalc.setText(_translate("MainWindow", "CALCULAR"))
        self.groupResL.setTitle(_translate("MainWindow", "Resultados Longitudinais"))
        self.pushButtonLuy.setText(_translate("MainWindow", "uy"))
        self.pushButtonLux.setText(_translate("MainWindow", "ux"))
        self.pushButtonLMy.setText(_translate("MainWindow", "My"))
        self.pushButtonLMx.setText(_translate("MainWindow", "Mx"))
        self.pushButtonLN.setText(_translate("MainWindow", "N"))
        self.groupResS.setTitle(_translate("MainWindow", "Resultados Seção Transversal"))
        self.lineSalt.setText(_translate("MainWindow", "100"))
        self.pushButtonMymin.setText(_translate("MainWindow", "Mymín"))
        self.pushButtonNmax.setText(_translate("MainWindow", "Nmáx"))
        self.pushButtonNmin.setText(_translate("MainWindow", "Nmín"))
        self.pushButtonMxmax.setText(_translate("MainWindow", "Mxmáx"))
        self.pushButtonMxmin.setText(_translate("MainWindow", "Mxmín"))
        self.pushButtonMymax.setText(_translate("MainWindow", "Mymáx"))
        self.pushButtonSalt.setText(_translate("MainWindow", "Altura (cm)"))
        self.labelVerif.setText(_translate("MainWindow", "RESULTADOS INDISPONÍVEIS"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_calc), _translate("MainWindow", "Cálculo e Resultados"))
        self.menuArquivo.setTitle(_translate("MainWindow", "Arquivo"))
        self.actionNovo.setText(_translate("MainWindow", "Novo"))
        self.actionNovo.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionAbrir.setText(_translate("MainWindow", "Abrir"))
        self.actionAbrir.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSalvar.setText(_translate("MainWindow", "Salvar"))
        self.actionSalvar_Como.setText(_translate("MainWindow", "Salvar Como"))
        self.actionSair.setText(_translate("MainWindow", "Sair"))
        self.actionGeometria.setText(_translate("MainWindow", "Geometria"))
        self.actionGeometria.setToolTip(_translate("MainWindow", "Dados longitudinais do pilar"))
        self.actionMateriais.setText(_translate("MainWindow", "Materiais"))
        self.actionMateriais.setToolTip(_translate("MainWindow", "Entrada de dados dos materiais"))
        self.actionSecaoTransversal.setText(_translate("MainWindow", "Seção Transversal"))
        self.actionSecaoTransversal.setToolTip(_translate("MainWindow", "Dados de entrada da seção transversal"))
        self.actionCargas.setText(_translate("MainWindow", "Cargas"))
        self.actionCargas.setToolTip(_translate("MainWindow", "Dados de entrada das cargas no pilar"))
        self.actionCalcular.setText(_translate("MainWindow", "Calcular"))
        self.actionCalcular.setToolTip(_translate("MainWindow", "Calcula o pilar"))
        self.actionResultados.setText(_translate("MainWindow", "Resultados"))
        self.actionResultados.setToolTip(_translate("MainWindow", "Resultados de cálculo"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
